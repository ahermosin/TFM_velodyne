// Generated by gencpp from file pcl_segment/observationRPY.msg
// DO NOT EDIT!


#ifndef PCL_SEGMENT_MESSAGE_OBSERVATIONRPY_H
#define PCL_SEGMENT_MESSAGE_OBSERVATIONRPY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pcl_segment/positionRPY.h>

namespace pcl_segment
{
template <class ContainerAllocator>
struct observationRPY_
{
  typedef observationRPY_<ContainerAllocator> Type;

  observationRPY_()
    : position()
    , is_Known(false)  {
    }
  observationRPY_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , is_Known(false)  {
  (void)_alloc;
    }



   typedef  ::pcl_segment::positionRPY_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef uint8_t _is_Known_type;
  _is_Known_type is_Known;





  typedef boost::shared_ptr< ::pcl_segment::observationRPY_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pcl_segment::observationRPY_<ContainerAllocator> const> ConstPtr;

}; // struct observationRPY_

typedef ::pcl_segment::observationRPY_<std::allocator<void> > observationRPY;

typedef boost::shared_ptr< ::pcl_segment::observationRPY > observationRPYPtr;
typedef boost::shared_ptr< ::pcl_segment::observationRPY const> observationRPYConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pcl_segment::observationRPY_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pcl_segment::observationRPY_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pcl_segment

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'pcl_segment': ['/home/alberto/workspaces/workspace14diciembre/src/pcl_segment/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pcl_segment::observationRPY_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pcl_segment::observationRPY_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pcl_segment::observationRPY_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pcl_segment::observationRPY_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pcl_segment::observationRPY_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pcl_segment::observationRPY_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pcl_segment::observationRPY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4dd6d3d5c4e65b8b85418ed0108e97f8";
  }

  static const char* value(const ::pcl_segment::observationRPY_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4dd6d3d5c4e65b8bULL;
  static const uint64_t static_value2 = 0x85418ed0108e97f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::pcl_segment::observationRPY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pcl_segment/observationRPY";
  }

  static const char* value(const ::pcl_segment::observationRPY_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pcl_segment::observationRPY_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pcl_segment/positionRPY position\n"
"bool is_Known\n"
"\n"
"================================================================================\n"
"MSG: pcl_segment/positionRPY\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"time stamp\n"
;
  }

  static const char* value(const ::pcl_segment::observationRPY_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pcl_segment::observationRPY_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.is_Known);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct observationRPY_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pcl_segment::observationRPY_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pcl_segment::observationRPY_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::pcl_segment::positionRPY_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "is_Known: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_Known);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PCL_SEGMENT_MESSAGE_OBSERVATIONRPY_H
