// Generated by gencpp from file lcm_to_ros/can_coche_direccion.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_CAN_COCHE_DIRECCION_H
#define LCM_TO_ROS_MESSAGE_CAN_COCHE_DIRECCION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct can_coche_direccion_
{
  typedef can_coche_direccion_<ContainerAllocator> Type;

  can_coche_direccion_()
    : timestamp_sec(0)
    , timestamp_nsec(0)
    , angulo_volante(0.0)
    , velocidad_volante(0.0)
    , angulo_columna(0.0)
    , velocidad_columna(0.0)
    , par_direccion(0.0)
    , flag_mensajes(0)  {
    }
  can_coche_direccion_(const ContainerAllocator& _alloc)
    : timestamp_sec(0)
    , timestamp_nsec(0)
    , angulo_volante(0.0)
    , velocidad_volante(0.0)
    , angulo_columna(0.0)
    , velocidad_columna(0.0)
    , par_direccion(0.0)
    , flag_mensajes(0)  {
  (void)_alloc;
    }



   typedef int32_t _timestamp_sec_type;
  _timestamp_sec_type timestamp_sec;

   typedef int32_t _timestamp_nsec_type;
  _timestamp_nsec_type timestamp_nsec;

   typedef double _angulo_volante_type;
  _angulo_volante_type angulo_volante;

   typedef double _velocidad_volante_type;
  _velocidad_volante_type velocidad_volante;

   typedef double _angulo_columna_type;
  _angulo_columna_type angulo_columna;

   typedef double _velocidad_columna_type;
  _velocidad_columna_type velocidad_columna;

   typedef double _par_direccion_type;
  _par_direccion_type par_direccion;

   typedef int8_t _flag_mensajes_type;
  _flag_mensajes_type flag_mensajes;





  typedef boost::shared_ptr< ::lcm_to_ros::can_coche_direccion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::can_coche_direccion_<ContainerAllocator> const> ConstPtr;

}; // struct can_coche_direccion_

typedef ::lcm_to_ros::can_coche_direccion_<std::allocator<void> > can_coche_direccion;

typedef boost::shared_ptr< ::lcm_to_ros::can_coche_direccion > can_coche_direccionPtr;
typedef boost::shared_ptr< ::lcm_to_ros::can_coche_direccion const> can_coche_direccionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::can_coche_direccion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::can_coche_direccion_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'lcm_to_ros': ['/home/alberto/workspaces/workspace14diciembre/src/lcm_to_ros/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::can_coche_direccion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::can_coche_direccion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::can_coche_direccion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::can_coche_direccion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::can_coche_direccion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::can_coche_direccion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::can_coche_direccion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a77a418fbb4092f983b505954b450fd";
  }

  static const char* value(const ::lcm_to_ros::can_coche_direccion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a77a418fbb4092fULL;
  static const uint64_t static_value2 = 0x983b505954b450fdULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::can_coche_direccion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/can_coche_direccion";
  }

  static const char* value(const ::lcm_to_ros::can_coche_direccion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::can_coche_direccion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n\
# This message was automatically generated by the lcm_to_ros package\n\
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n\
#######################################################################\n\
#\n\
# Source message:    .msg\n\
# Creation:          lun 18 feb 2019 17:14:15 CET\n\
#\n\
#######################################################################\n\
int32               timestamp_sec\n\
int32               timestamp_nsec\n\
float64             angulo_volante\n\
float64             velocidad_volante\n\
float64             angulo_columna\n\
float64             velocidad_columna\n\
float64             par_direccion\n\
byte                flag_mensajes\n\
";
  }

  static const char* value(const ::lcm_to_ros::can_coche_direccion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::can_coche_direccion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_sec);
      stream.next(m.timestamp_nsec);
      stream.next(m.angulo_volante);
      stream.next(m.velocidad_volante);
      stream.next(m.angulo_columna);
      stream.next(m.velocidad_columna);
      stream.next(m.par_direccion);
      stream.next(m.flag_mensajes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct can_coche_direccion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::can_coche_direccion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::can_coche_direccion_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_sec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp_sec);
    s << indent << "timestamp_nsec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp_nsec);
    s << indent << "angulo_volante: ";
    Printer<double>::stream(s, indent + "  ", v.angulo_volante);
    s << indent << "velocidad_volante: ";
    Printer<double>::stream(s, indent + "  ", v.velocidad_volante);
    s << indent << "angulo_columna: ";
    Printer<double>::stream(s, indent + "  ", v.angulo_columna);
    s << indent << "velocidad_columna: ";
    Printer<double>::stream(s, indent + "  ", v.velocidad_columna);
    s << indent << "par_direccion: ";
    Printer<double>::stream(s, indent + "  ", v.par_direccion);
    s << indent << "flag_mensajes: ";
    Printer<int8_t>::stream(s, indent + "  ", v.flag_mensajes);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_CAN_COCHE_DIRECCION_H
