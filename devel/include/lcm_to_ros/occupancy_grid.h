// Generated by gencpp from file lcm_to_ros/occupancy_grid.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_OCCUPANCY_GRID_H
#define LCM_TO_ROS_MESSAGE_OCCUPANCY_GRID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct occupancy_grid_
{
  typedef occupancy_grid_<ContainerAllocator> Type;

  occupancy_grid_()
    : width(0)
    , height(0)
    , d_lat(0.0)
    , d_long(0.0)
    , n_data(0)
    , resolution(0.0)
    , data()  {
    }
  occupancy_grid_(const ContainerAllocator& _alloc)
    : width(0)
    , height(0)
    , d_lat(0.0)
    , d_long(0.0)
    , n_data(0)
    , resolution(0.0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;

   typedef float _d_lat_type;
  _d_lat_type d_lat;

   typedef float _d_long_type;
  _d_long_type d_long;

   typedef int32_t _n_data_type;
  _n_data_type n_data;

   typedef float _resolution_type;
  _resolution_type resolution;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::lcm_to_ros::occupancy_grid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::occupancy_grid_<ContainerAllocator> const> ConstPtr;

}; // struct occupancy_grid_

typedef ::lcm_to_ros::occupancy_grid_<std::allocator<void> > occupancy_grid;

typedef boost::shared_ptr< ::lcm_to_ros::occupancy_grid > occupancy_gridPtr;
typedef boost::shared_ptr< ::lcm_to_ros::occupancy_grid const> occupancy_gridConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::occupancy_grid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::occupancy_grid_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'lcm_to_ros': ['/home/alberto/workspaces/workspace14diciembre/src/lcm_to_ros/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::occupancy_grid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::occupancy_grid_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::occupancy_grid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::occupancy_grid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::occupancy_grid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::occupancy_grid_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::occupancy_grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41f67f04cae87b0293624c6fabb5025f";
  }

  static const char* value(const ::lcm_to_ros::occupancy_grid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41f67f04cae87b02ULL;
  static const uint64_t static_value2 = 0x93624c6fabb5025fULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::occupancy_grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/occupancy_grid";
  }

  static const char* value(const ::lcm_to_ros::occupancy_grid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::occupancy_grid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n\
# This message was automatically generated by the lcm_to_ros package\n\
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n\
#######################################################################\n\
#\n\
# Source message:    .msg\n\
# Creation:          lun 18 feb 2019 17:14:17 CET\n\
#\n\
#######################################################################\n\
int32               width\n\
int32               height\n\
float32             d_lat\n\
float32             d_long\n\
int32               n_data\n\
float32             resolution\n\
int8[]              data\n\
";
  }

  static const char* value(const ::lcm_to_ros::occupancy_grid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::occupancy_grid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.d_lat);
      stream.next(m.d_long);
      stream.next(m.n_data);
      stream.next(m.resolution);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct occupancy_grid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::occupancy_grid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::occupancy_grid_<ContainerAllocator>& v)
  {
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "d_lat: ";
    Printer<float>::stream(s, indent + "  ", v.d_lat);
    s << indent << "d_long: ";
    Printer<float>::stream(s, indent + "  ", v.d_long);
    s << indent << "n_data: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n_data);
    s << indent << "resolution: ";
    Printer<float>::stream(s, indent + "  ", v.resolution);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_OCCUPANCY_GRID_H
