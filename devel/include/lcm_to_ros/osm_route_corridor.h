// Generated by gencpp from file lcm_to_ros/osm_route_corridor.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_OSM_ROUTE_CORRIDOR_H
#define LCM_TO_ROS_MESSAGE_OSM_ROUTE_CORRIDOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct osm_route_corridor_
{
  typedef osm_route_corridor_<ContainerAllocator> Type;

  osm_route_corridor_()
    : id(0)
    , n_puntos(0)
    , punto_final()
    , izquierda()
    , centro()
    , derecha()  {
      punto_final.assign(0.0);
  }
  osm_route_corridor_(const ContainerAllocator& _alloc)
    : id(0)
    , n_puntos(0)
    , punto_final()
    , izquierda(_alloc)
    , centro(_alloc)
    , derecha(_alloc)  {
  (void)_alloc;
      punto_final.assign(0.0);
  }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _n_puntos_type;
  _n_puntos_type n_puntos;

   typedef boost::array<double, 2>  _punto_final_type;
  _punto_final_type punto_final;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _izquierda_type;
  _izquierda_type izquierda;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _centro_type;
  _centro_type centro;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _derecha_type;
  _derecha_type derecha;





  typedef boost::shared_ptr< ::lcm_to_ros::osm_route_corridor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::osm_route_corridor_<ContainerAllocator> const> ConstPtr;

}; // struct osm_route_corridor_

typedef ::lcm_to_ros::osm_route_corridor_<std::allocator<void> > osm_route_corridor;

typedef boost::shared_ptr< ::lcm_to_ros::osm_route_corridor > osm_route_corridorPtr;
typedef boost::shared_ptr< ::lcm_to_ros::osm_route_corridor const> osm_route_corridorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::osm_route_corridor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::osm_route_corridor_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'lcm_to_ros': ['/home/alberto/workspaces/workspace14diciembre/src/lcm_to_ros/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::osm_route_corridor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::osm_route_corridor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::osm_route_corridor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::osm_route_corridor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::osm_route_corridor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::osm_route_corridor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::osm_route_corridor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9209afcc07bf30ee8b230f80895f99ea";
  }

  static const char* value(const ::lcm_to_ros::osm_route_corridor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9209afcc07bf30eeULL;
  static const uint64_t static_value2 = 0x8b230f80895f99eaULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::osm_route_corridor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/osm_route_corridor";
  }

  static const char* value(const ::lcm_to_ros::osm_route_corridor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::osm_route_corridor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n\
# This message was automatically generated by the lcm_to_ros package\n\
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n\
#######################################################################\n\
#\n\
# Source message:    .msg\n\
# Creation:          lun 18 feb 2019 17:14:17 CET\n\
#\n\
#######################################################################\n\
int32               id\n\
int32               n_puntos\n\
float64[2]          punto_final\n\
float64[]           izquierda\n\
float64[]           centro\n\
float64[]           derecha\n\
";
  }

  static const char* value(const ::lcm_to_ros::osm_route_corridor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::osm_route_corridor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.n_puntos);
      stream.next(m.punto_final);
      stream.next(m.izquierda);
      stream.next(m.centro);
      stream.next(m.derecha);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct osm_route_corridor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::osm_route_corridor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::osm_route_corridor_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "n_puntos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n_puntos);
    s << indent << "punto_final[]" << std::endl;
    for (size_t i = 0; i < v.punto_final.size(); ++i)
    {
      s << indent << "  punto_final[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.punto_final[i]);
    }
    s << indent << "izquierda[]" << std::endl;
    for (size_t i = 0; i < v.izquierda.size(); ++i)
    {
      s << indent << "  izquierda[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.izquierda[i]);
    }
    s << indent << "centro[]" << std::endl;
    for (size_t i = 0; i < v.centro.size(); ++i)
    {
      s << indent << "  centro[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.centro[i]);
    }
    s << indent << "derecha[]" << std::endl;
    for (size_t i = 0; i < v.derecha.size(); ++i)
    {
      s << indent << "  derecha[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.derecha[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_OSM_ROUTE_CORRIDOR_H
