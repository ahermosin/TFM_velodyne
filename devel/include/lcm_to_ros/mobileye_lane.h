// Generated by gencpp from file lcm_to_ros/mobileye_lane.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_MOBILEYE_LANE_H
#define LCM_TO_ROS_MESSAGE_MOBILEYE_LANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct mobileye_lane_
{
  typedef mobileye_lane_<ContainerAllocator> Type;

  mobileye_lane_()
    : timestamp_sec(0)
    , timestamp_nsec(0)
    , curvatura(0.0)
    , heading(0.0)
    , yaw(0.0)
    , pitch(0.0)
    , flags(0)  {
    }
  mobileye_lane_(const ContainerAllocator& _alloc)
    : timestamp_sec(0)
    , timestamp_nsec(0)
    , curvatura(0.0)
    , heading(0.0)
    , yaw(0.0)
    , pitch(0.0)
    , flags(0)  {
  (void)_alloc;
    }



   typedef int32_t _timestamp_sec_type;
  _timestamp_sec_type timestamp_sec;

   typedef int32_t _timestamp_nsec_type;
  _timestamp_nsec_type timestamp_nsec;

   typedef float _curvatura_type;
  _curvatura_type curvatura;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef int8_t _flags_type;
  _flags_type flags;





  typedef boost::shared_ptr< ::lcm_to_ros::mobileye_lane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::mobileye_lane_<ContainerAllocator> const> ConstPtr;

}; // struct mobileye_lane_

typedef ::lcm_to_ros::mobileye_lane_<std::allocator<void> > mobileye_lane;

typedef boost::shared_ptr< ::lcm_to_ros::mobileye_lane > mobileye_lanePtr;
typedef boost::shared_ptr< ::lcm_to_ros::mobileye_lane const> mobileye_laneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::mobileye_lane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::mobileye_lane_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'lcm_to_ros': ['/home/alberto/workspaces/workspace14diciembre/src/lcm_to_ros/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::mobileye_lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::mobileye_lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::mobileye_lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::mobileye_lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::mobileye_lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::mobileye_lane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::mobileye_lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9da724a4f0dc8f5acbc944b9da5a9c67";
  }

  static const char* value(const ::lcm_to_ros::mobileye_lane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9da724a4f0dc8f5aULL;
  static const uint64_t static_value2 = 0xcbc944b9da5a9c67ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::mobileye_lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/mobileye_lane";
  }

  static const char* value(const ::lcm_to_ros::mobileye_lane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::mobileye_lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n\
# This message was automatically generated by the lcm_to_ros package\n\
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n\
#######################################################################\n\
#\n\
# Source message:    .msg\n\
# Creation:          lun 18 feb 2019 17:14:16 CET\n\
#\n\
#######################################################################\n\
int32               timestamp_sec\n\
int32               timestamp_nsec\n\
float32             curvatura\n\
float32             heading\n\
float32             yaw\n\
float32             pitch\n\
byte                flags\n\
";
  }

  static const char* value(const ::lcm_to_ros::mobileye_lane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::mobileye_lane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_sec);
      stream.next(m.timestamp_nsec);
      stream.next(m.curvatura);
      stream.next(m.heading);
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.flags);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mobileye_lane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::mobileye_lane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::mobileye_lane_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_sec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp_sec);
    s << indent << "timestamp_nsec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp_nsec);
    s << indent << "curvatura: ";
    Printer<float>::stream(s, indent + "  ", v.curvatura);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "flags: ";
    Printer<int8_t>::stream(s, indent + "  ", v.flags);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_MOBILEYE_LANE_H
