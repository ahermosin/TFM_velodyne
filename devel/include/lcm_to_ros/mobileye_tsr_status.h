// Generated by gencpp from file lcm_to_ros/mobileye_tsr_status.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_MOBILEYE_TSR_STATUS_H
#define LCM_TO_ROS_MESSAGE_MOBILEYE_TSR_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct mobileye_tsr_status_
{
  typedef mobileye_tsr_status_<ContainerAllocator> Type;

  mobileye_tsr_status_()
    : timestamp_sec(0)
    , timestamp_nsec(0)
    , tsr1_tipo(0)
    , tsr1_valor(0)
    , tsr2_tipo(0)
    , tsr2_valor(0)
    , tsr3_tipo(0)
    , tsr3_valor(0)
    , tsr4_tipo(0)
    , tsr4_valor(0)  {
    }
  mobileye_tsr_status_(const ContainerAllocator& _alloc)
    : timestamp_sec(0)
    , timestamp_nsec(0)
    , tsr1_tipo(0)
    , tsr1_valor(0)
    , tsr2_tipo(0)
    , tsr2_valor(0)
    , tsr3_tipo(0)
    , tsr3_valor(0)
    , tsr4_tipo(0)
    , tsr4_valor(0)  {
  (void)_alloc;
    }



   typedef int32_t _timestamp_sec_type;
  _timestamp_sec_type timestamp_sec;

   typedef int32_t _timestamp_nsec_type;
  _timestamp_nsec_type timestamp_nsec;

   typedef int8_t _tsr1_tipo_type;
  _tsr1_tipo_type tsr1_tipo;

   typedef int8_t _tsr1_valor_type;
  _tsr1_valor_type tsr1_valor;

   typedef int8_t _tsr2_tipo_type;
  _tsr2_tipo_type tsr2_tipo;

   typedef int8_t _tsr2_valor_type;
  _tsr2_valor_type tsr2_valor;

   typedef int8_t _tsr3_tipo_type;
  _tsr3_tipo_type tsr3_tipo;

   typedef int8_t _tsr3_valor_type;
  _tsr3_valor_type tsr3_valor;

   typedef int8_t _tsr4_tipo_type;
  _tsr4_tipo_type tsr4_tipo;

   typedef int8_t _tsr4_valor_type;
  _tsr4_valor_type tsr4_valor;





  typedef boost::shared_ptr< ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator> const> ConstPtr;

}; // struct mobileye_tsr_status_

typedef ::lcm_to_ros::mobileye_tsr_status_<std::allocator<void> > mobileye_tsr_status;

typedef boost::shared_ptr< ::lcm_to_ros::mobileye_tsr_status > mobileye_tsr_statusPtr;
typedef boost::shared_ptr< ::lcm_to_ros::mobileye_tsr_status const> mobileye_tsr_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'lcm_to_ros': ['/home/alberto/workspaces/workspace14diciembre/src/lcm_to_ros/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ddb6df2c3438877c3e5e4ec2624a854";
  }

  static const char* value(const ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ddb6df2c3438877ULL;
  static const uint64_t static_value2 = 0xc3e5e4ec2624a854ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/mobileye_tsr_status";
  }

  static const char* value(const ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n\
# This message was automatically generated by the lcm_to_ros package\n\
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n\
#######################################################################\n\
#\n\
# Source message:    .msg\n\
# Creation:          lun 18 feb 2019 17:14:17 CET\n\
#\n\
#######################################################################\n\
int32               timestamp_sec\n\
int32               timestamp_nsec\n\
byte                tsr1_tipo\n\
byte                tsr1_valor\n\
byte                tsr2_tipo\n\
byte                tsr2_valor\n\
byte                tsr3_tipo\n\
byte                tsr3_valor\n\
byte                tsr4_tipo\n\
byte                tsr4_valor\n\
";
  }

  static const char* value(const ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_sec);
      stream.next(m.timestamp_nsec);
      stream.next(m.tsr1_tipo);
      stream.next(m.tsr1_valor);
      stream.next(m.tsr2_tipo);
      stream.next(m.tsr2_valor);
      stream.next(m.tsr3_tipo);
      stream.next(m.tsr3_valor);
      stream.next(m.tsr4_tipo);
      stream.next(m.tsr4_valor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mobileye_tsr_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::mobileye_tsr_status_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_sec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp_sec);
    s << indent << "timestamp_nsec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp_nsec);
    s << indent << "tsr1_tipo: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tsr1_tipo);
    s << indent << "tsr1_valor: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tsr1_valor);
    s << indent << "tsr2_tipo: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tsr2_tipo);
    s << indent << "tsr2_valor: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tsr2_valor);
    s << indent << "tsr3_tipo: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tsr3_tipo);
    s << indent << "tsr3_valor: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tsr3_valor);
    s << indent << "tsr4_tipo: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tsr4_tipo);
    s << indent << "tsr4_valor: ";
    Printer<int8_t>::stream(s, indent + "  ", v.tsr4_valor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_MOBILEYE_TSR_STATUS_H
