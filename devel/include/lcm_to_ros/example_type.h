// Generated by gencpp from file lcm_to_ros/example_type.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_EXAMPLE_TYPE_H
#define LCM_TO_ROS_MESSAGE_EXAMPLE_TYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lcm_to_ros/simple_channel.h>

namespace lcm_to_ros
{
template <class ContainerAllocator>
struct example_type_
{
  typedef example_type_<ContainerAllocator> Type;

  example_type_()
    : str()
    , flag(false)
    , gnash(0)
    , i8_scalar(0)
    , i8_array()
    , i16_scalar(0)
    , i16_array()
    , i32_scalar(0)
    , i32_array()
    , i64_scalar(0)
    , i64_array()
    , flt_scalar(0.0)
    , flt_array()
    , dbl_scalar(0.0)
    , dbl_array()
    , variable_length_array()
    , num_channels(0)
    , channels()  {
      i8_array.assign(0);

      i16_array.assign(0);

      i32_array.assign(0);

      i64_array.assign(0);

      flt_array.assign(0.0);

      dbl_array.assign(0.0);
  }
  example_type_(const ContainerAllocator& _alloc)
    : str(_alloc)
    , flag(false)
    , gnash(0)
    , i8_scalar(0)
    , i8_array()
    , i16_scalar(0)
    , i16_array()
    , i32_scalar(0)
    , i32_array()
    , i64_scalar(0)
    , i64_array()
    , flt_scalar(0.0)
    , flt_array()
    , dbl_scalar(0.0)
    , dbl_array()
    , variable_length_array(_alloc)
    , num_channels(0)
    , channels(_alloc)  {
  (void)_alloc;
      i8_array.assign(0);

      i16_array.assign(0);

      i32_array.assign(0);

      i64_array.assign(0);

      flt_array.assign(0.0);

      dbl_array.assign(0.0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _str_type;
  _str_type str;

   typedef uint8_t _flag_type;
  _flag_type flag;

   typedef int8_t _gnash_type;
  _gnash_type gnash;

   typedef int8_t _i8_scalar_type;
  _i8_scalar_type i8_scalar;

   typedef boost::array<int8_t, 2>  _i8_array_type;
  _i8_array_type i8_array;

   typedef int16_t _i16_scalar_type;
  _i16_scalar_type i16_scalar;

   typedef boost::array<int16_t, 2>  _i16_array_type;
  _i16_array_type i16_array;

   typedef int32_t _i32_scalar_type;
  _i32_scalar_type i32_scalar;

   typedef boost::array<int32_t, 2>  _i32_array_type;
  _i32_array_type i32_array;

   typedef int64_t _i64_scalar_type;
  _i64_scalar_type i64_scalar;

   typedef boost::array<int64_t, 2>  _i64_array_type;
  _i64_array_type i64_array;

   typedef float _flt_scalar_type;
  _flt_scalar_type flt_scalar;

   typedef boost::array<float, 2>  _flt_array_type;
  _flt_array_type flt_array;

   typedef double _dbl_scalar_type;
  _dbl_scalar_type dbl_scalar;

   typedef boost::array<double, 2>  _dbl_array_type;
  _dbl_array_type dbl_array;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _variable_length_array_type;
  _variable_length_array_type variable_length_array;

   typedef int32_t _num_channels_type;
  _num_channels_type num_channels;

   typedef std::vector< ::lcm_to_ros::simple_channel_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::lcm_to_ros::simple_channel_<ContainerAllocator> >::other >  _channels_type;
  _channels_type channels;





  typedef boost::shared_ptr< ::lcm_to_ros::example_type_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::example_type_<ContainerAllocator> const> ConstPtr;

}; // struct example_type_

typedef ::lcm_to_ros::example_type_<std::allocator<void> > example_type;

typedef boost::shared_ptr< ::lcm_to_ros::example_type > example_typePtr;
typedef boost::shared_ptr< ::lcm_to_ros::example_type const> example_typeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::example_type_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::example_type_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'lcm_to_ros': ['/home/alberto/workspaces/workspace14diciembre/src/lcm_to_ros/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::example_type_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::example_type_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::example_type_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::example_type_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::example_type_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::example_type_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::example_type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1dc0698e415584c20abf27e7abb42161";
  }

  static const char* value(const ::lcm_to_ros::example_type_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1dc0698e415584c2ULL;
  static const uint64_t static_value2 = 0x0abf27e7abb42161ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::example_type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/example_type";
  }

  static const char* value(const ::lcm_to_ros::example_type_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::example_type_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n\
# This message was automatically generated by the lcm_to_ros package\n\
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n\
#######################################################################\n\
#\n\
# Source message:    .msg\n\
# Creation:          jue 07 mar 2019 13:27:48 CET\n\
#\n\
#######################################################################\n\
string              str\n\
bool                flag\n\
byte                gnash\n\
int8                i8_scalar\n\
int8[2]             i8_array\n\
int16               i16_scalar\n\
int16[2]            i16_array\n\
int32               i32_scalar\n\
int32[2]            i32_array\n\
int64               i64_scalar\n\
int64[2]            i64_array\n\
float32             flt_scalar\n\
float32[2]          flt_array\n\
float64             dbl_scalar\n\
float64[2]          dbl_array\n\
float64[]           variable_length_array\n\
int32               num_channels\n\
simple_channel[]    channels\n\
\n\
================================================================================\n\
MSG: lcm_to_ros/simple_channel\n\
#######################################################################\n\
# This message was automatically generated by the lcm_to_ros package\n\
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n\
#######################################################################\n\
#\n\
# Source message:    .msg\n\
# Creation:          jue 07 mar 2019 13:27:48 CET\n\
#\n\
#######################################################################\n\
string              name\n\
float64             value\n\
";
  }

  static const char* value(const ::lcm_to_ros::example_type_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::example_type_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.str);
      stream.next(m.flag);
      stream.next(m.gnash);
      stream.next(m.i8_scalar);
      stream.next(m.i8_array);
      stream.next(m.i16_scalar);
      stream.next(m.i16_array);
      stream.next(m.i32_scalar);
      stream.next(m.i32_array);
      stream.next(m.i64_scalar);
      stream.next(m.i64_array);
      stream.next(m.flt_scalar);
      stream.next(m.flt_array);
      stream.next(m.dbl_scalar);
      stream.next(m.dbl_array);
      stream.next(m.variable_length_array);
      stream.next(m.num_channels);
      stream.next(m.channels);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct example_type_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::example_type_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::example_type_<ContainerAllocator>& v)
  {
    s << indent << "str: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.str);
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
    s << indent << "gnash: ";
    Printer<int8_t>::stream(s, indent + "  ", v.gnash);
    s << indent << "i8_scalar: ";
    Printer<int8_t>::stream(s, indent + "  ", v.i8_scalar);
    s << indent << "i8_array[]" << std::endl;
    for (size_t i = 0; i < v.i8_array.size(); ++i)
    {
      s << indent << "  i8_array[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.i8_array[i]);
    }
    s << indent << "i16_scalar: ";
    Printer<int16_t>::stream(s, indent + "  ", v.i16_scalar);
    s << indent << "i16_array[]" << std::endl;
    for (size_t i = 0; i < v.i16_array.size(); ++i)
    {
      s << indent << "  i16_array[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.i16_array[i]);
    }
    s << indent << "i32_scalar: ";
    Printer<int32_t>::stream(s, indent + "  ", v.i32_scalar);
    s << indent << "i32_array[]" << std::endl;
    for (size_t i = 0; i < v.i32_array.size(); ++i)
    {
      s << indent << "  i32_array[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.i32_array[i]);
    }
    s << indent << "i64_scalar: ";
    Printer<int64_t>::stream(s, indent + "  ", v.i64_scalar);
    s << indent << "i64_array[]" << std::endl;
    for (size_t i = 0; i < v.i64_array.size(); ++i)
    {
      s << indent << "  i64_array[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.i64_array[i]);
    }
    s << indent << "flt_scalar: ";
    Printer<float>::stream(s, indent + "  ", v.flt_scalar);
    s << indent << "flt_array[]" << std::endl;
    for (size_t i = 0; i < v.flt_array.size(); ++i)
    {
      s << indent << "  flt_array[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.flt_array[i]);
    }
    s << indent << "dbl_scalar: ";
    Printer<double>::stream(s, indent + "  ", v.dbl_scalar);
    s << indent << "dbl_array[]" << std::endl;
    for (size_t i = 0; i < v.dbl_array.size(); ++i)
    {
      s << indent << "  dbl_array[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.dbl_array[i]);
    }
    s << indent << "variable_length_array[]" << std::endl;
    for (size_t i = 0; i < v.variable_length_array.size(); ++i)
    {
      s << indent << "  variable_length_array[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.variable_length_array[i]);
    }
    s << indent << "num_channels: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_channels);
    s << indent << "channels[]" << std::endl;
    for (size_t i = 0; i < v.channels.size(); ++i)
    {
      s << indent << "  channels[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lcm_to_ros::simple_channel_<ContainerAllocator> >::stream(s, indent + "    ", v.channels[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_EXAMPLE_TYPE_H
