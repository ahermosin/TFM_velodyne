// Generated by gencpp from file lcm_to_ros/estado_coche_LL.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_ESTADO_COCHE_LL_H
#define LCM_TO_ROS_MESSAGE_ESTADO_COCHE_LL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct estado_coche_LL_
{
  typedef estado_coche_LL_<ContainerAllocator> Type;

  estado_coche_LL_()
    : tiempo(0.0)
    , calidad_gps(0)
    , nro_satelites(0)
    , UTM_x(0.0)
    , UTM_y(0.0)
    , orientacion(0.0)
    , velocidad(0.0)
    , aceleracion(0.0)
    , k_UTM_x(0.0)
    , k_UTM_y(0.0)
    , k_longitud(0.0)
    , k_latitud(0.0)
    , k_orientacion(0.0)
    , k_velocidad(0.0)
    , k_aceleracion(0.0)
    , angulo_volante(0.0)
    , flag_msg_gps(false)
    , flag_msg_canvel(false)
    , flag_msg_canvol(false)  {
    }
  estado_coche_LL_(const ContainerAllocator& _alloc)
    : tiempo(0.0)
    , calidad_gps(0)
    , nro_satelites(0)
    , UTM_x(0.0)
    , UTM_y(0.0)
    , orientacion(0.0)
    , velocidad(0.0)
    , aceleracion(0.0)
    , k_UTM_x(0.0)
    , k_UTM_y(0.0)
    , k_longitud(0.0)
    , k_latitud(0.0)
    , k_orientacion(0.0)
    , k_velocidad(0.0)
    , k_aceleracion(0.0)
    , angulo_volante(0.0)
    , flag_msg_gps(false)
    , flag_msg_canvel(false)
    , flag_msg_canvol(false)  {
  (void)_alloc;
    }



   typedef double _tiempo_type;
  _tiempo_type tiempo;

   typedef int8_t _calidad_gps_type;
  _calidad_gps_type calidad_gps;

   typedef int8_t _nro_satelites_type;
  _nro_satelites_type nro_satelites;

   typedef double _UTM_x_type;
  _UTM_x_type UTM_x;

   typedef double _UTM_y_type;
  _UTM_y_type UTM_y;

   typedef double _orientacion_type;
  _orientacion_type orientacion;

   typedef double _velocidad_type;
  _velocidad_type velocidad;

   typedef double _aceleracion_type;
  _aceleracion_type aceleracion;

   typedef double _k_UTM_x_type;
  _k_UTM_x_type k_UTM_x;

   typedef double _k_UTM_y_type;
  _k_UTM_y_type k_UTM_y;

   typedef double _k_longitud_type;
  _k_longitud_type k_longitud;

   typedef double _k_latitud_type;
  _k_latitud_type k_latitud;

   typedef double _k_orientacion_type;
  _k_orientacion_type k_orientacion;

   typedef double _k_velocidad_type;
  _k_velocidad_type k_velocidad;

   typedef double _k_aceleracion_type;
  _k_aceleracion_type k_aceleracion;

   typedef double _angulo_volante_type;
  _angulo_volante_type angulo_volante;

   typedef uint8_t _flag_msg_gps_type;
  _flag_msg_gps_type flag_msg_gps;

   typedef uint8_t _flag_msg_canvel_type;
  _flag_msg_canvel_type flag_msg_canvel;

   typedef uint8_t _flag_msg_canvol_type;
  _flag_msg_canvol_type flag_msg_canvol;





  typedef boost::shared_ptr< ::lcm_to_ros::estado_coche_LL_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::estado_coche_LL_<ContainerAllocator> const> ConstPtr;

}; // struct estado_coche_LL_

typedef ::lcm_to_ros::estado_coche_LL_<std::allocator<void> > estado_coche_LL;

typedef boost::shared_ptr< ::lcm_to_ros::estado_coche_LL > estado_coche_LLPtr;
typedef boost::shared_ptr< ::lcm_to_ros::estado_coche_LL const> estado_coche_LLConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::estado_coche_LL_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::estado_coche_LL_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'lcm_to_ros': ['/home/alberto/workspaces/workspace14diciembre/src/lcm_to_ros/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::estado_coche_LL_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::estado_coche_LL_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::estado_coche_LL_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::estado_coche_LL_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::estado_coche_LL_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::estado_coche_LL_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::estado_coche_LL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e7c25e06970f89ceb6cf213885e085a4";
  }

  static const char* value(const ::lcm_to_ros::estado_coche_LL_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe7c25e06970f89ceULL;
  static const uint64_t static_value2 = 0xb6cf213885e085a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::estado_coche_LL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/estado_coche_LL";
  }

  static const char* value(const ::lcm_to_ros::estado_coche_LL_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::estado_coche_LL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n\
# This message was automatically generated by the lcm_to_ros package\n\
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n\
#######################################################################\n\
#\n\
# Source message:    .msg\n\
# Creation:          lun 18 feb 2019 17:14:16 CET\n\
#\n\
#######################################################################\n\
float64             tiempo\n\
int8                calidad_gps\n\
int8                nro_satelites\n\
float64             UTM_x\n\
float64             UTM_y\n\
float64             orientacion\n\
float64             velocidad\n\
float64             aceleracion\n\
float64             k_UTM_x\n\
float64             k_UTM_y\n\
float64             k_longitud\n\
float64             k_latitud\n\
float64             k_orientacion\n\
float64             k_velocidad\n\
float64             k_aceleracion\n\
float64             angulo_volante\n\
bool                flag_msg_gps\n\
bool                flag_msg_canvel\n\
bool                flag_msg_canvol\n\
";
  }

  static const char* value(const ::lcm_to_ros::estado_coche_LL_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::estado_coche_LL_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tiempo);
      stream.next(m.calidad_gps);
      stream.next(m.nro_satelites);
      stream.next(m.UTM_x);
      stream.next(m.UTM_y);
      stream.next(m.orientacion);
      stream.next(m.velocidad);
      stream.next(m.aceleracion);
      stream.next(m.k_UTM_x);
      stream.next(m.k_UTM_y);
      stream.next(m.k_longitud);
      stream.next(m.k_latitud);
      stream.next(m.k_orientacion);
      stream.next(m.k_velocidad);
      stream.next(m.k_aceleracion);
      stream.next(m.angulo_volante);
      stream.next(m.flag_msg_gps);
      stream.next(m.flag_msg_canvel);
      stream.next(m.flag_msg_canvol);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct estado_coche_LL_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::estado_coche_LL_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::estado_coche_LL_<ContainerAllocator>& v)
  {
    s << indent << "tiempo: ";
    Printer<double>::stream(s, indent + "  ", v.tiempo);
    s << indent << "calidad_gps: ";
    Printer<int8_t>::stream(s, indent + "  ", v.calidad_gps);
    s << indent << "nro_satelites: ";
    Printer<int8_t>::stream(s, indent + "  ", v.nro_satelites);
    s << indent << "UTM_x: ";
    Printer<double>::stream(s, indent + "  ", v.UTM_x);
    s << indent << "UTM_y: ";
    Printer<double>::stream(s, indent + "  ", v.UTM_y);
    s << indent << "orientacion: ";
    Printer<double>::stream(s, indent + "  ", v.orientacion);
    s << indent << "velocidad: ";
    Printer<double>::stream(s, indent + "  ", v.velocidad);
    s << indent << "aceleracion: ";
    Printer<double>::stream(s, indent + "  ", v.aceleracion);
    s << indent << "k_UTM_x: ";
    Printer<double>::stream(s, indent + "  ", v.k_UTM_x);
    s << indent << "k_UTM_y: ";
    Printer<double>::stream(s, indent + "  ", v.k_UTM_y);
    s << indent << "k_longitud: ";
    Printer<double>::stream(s, indent + "  ", v.k_longitud);
    s << indent << "k_latitud: ";
    Printer<double>::stream(s, indent + "  ", v.k_latitud);
    s << indent << "k_orientacion: ";
    Printer<double>::stream(s, indent + "  ", v.k_orientacion);
    s << indent << "k_velocidad: ";
    Printer<double>::stream(s, indent + "  ", v.k_velocidad);
    s << indent << "k_aceleracion: ";
    Printer<double>::stream(s, indent + "  ", v.k_aceleracion);
    s << indent << "angulo_volante: ";
    Printer<double>::stream(s, indent + "  ", v.angulo_volante);
    s << indent << "flag_msg_gps: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_msg_gps);
    s << indent << "flag_msg_canvel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_msg_canvel);
    s << indent << "flag_msg_canvol: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_msg_canvol);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_ESTADO_COCHE_LL_H
