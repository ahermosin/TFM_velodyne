// Generated by gencpp from file lcm_to_ros/gps_data.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_GPS_DATA_H
#define LCM_TO_ROS_MESSAGE_GPS_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct gps_data_
{
  typedef gps_data_<ContainerAllocator> Type;

  gps_data_()
    : timestamp_sec(0)
    , timestamp_nsec(0)
    , hora(0.0)
    , utm_este(0.0)
    , utm_norte(0.0)
    , longitud(0.0)
    , latitud(0.0)
    , altura(0.0)
    , hdop(0.0)
    , velocidad(0.0)
    , heading_vel(0.0)
    , semi_major_desv(0.0)
    , semi_minor_desv(0.0)
    , semi_major_orien(0.0)
    , calidad(0)
    , nro_satelites(0)  {
    }
  gps_data_(const ContainerAllocator& _alloc)
    : timestamp_sec(0)
    , timestamp_nsec(0)
    , hora(0.0)
    , utm_este(0.0)
    , utm_norte(0.0)
    , longitud(0.0)
    , latitud(0.0)
    , altura(0.0)
    , hdop(0.0)
    , velocidad(0.0)
    , heading_vel(0.0)
    , semi_major_desv(0.0)
    , semi_minor_desv(0.0)
    , semi_major_orien(0.0)
    , calidad(0)
    , nro_satelites(0)  {
  (void)_alloc;
    }



   typedef int32_t _timestamp_sec_type;
  _timestamp_sec_type timestamp_sec;

   typedef int32_t _timestamp_nsec_type;
  _timestamp_nsec_type timestamp_nsec;

   typedef double _hora_type;
  _hora_type hora;

   typedef double _utm_este_type;
  _utm_este_type utm_este;

   typedef double _utm_norte_type;
  _utm_norte_type utm_norte;

   typedef double _longitud_type;
  _longitud_type longitud;

   typedef double _latitud_type;
  _latitud_type latitud;

   typedef double _altura_type;
  _altura_type altura;

   typedef double _hdop_type;
  _hdop_type hdop;

   typedef double _velocidad_type;
  _velocidad_type velocidad;

   typedef double _heading_vel_type;
  _heading_vel_type heading_vel;

   typedef double _semi_major_desv_type;
  _semi_major_desv_type semi_major_desv;

   typedef double _semi_minor_desv_type;
  _semi_minor_desv_type semi_minor_desv;

   typedef double _semi_major_orien_type;
  _semi_major_orien_type semi_major_orien;

   typedef int8_t _calidad_type;
  _calidad_type calidad;

   typedef int8_t _nro_satelites_type;
  _nro_satelites_type nro_satelites;





  typedef boost::shared_ptr< ::lcm_to_ros::gps_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::gps_data_<ContainerAllocator> const> ConstPtr;

}; // struct gps_data_

typedef ::lcm_to_ros::gps_data_<std::allocator<void> > gps_data;

typedef boost::shared_ptr< ::lcm_to_ros::gps_data > gps_dataPtr;
typedef boost::shared_ptr< ::lcm_to_ros::gps_data const> gps_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::gps_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::gps_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'lcm_to_ros': ['/home/alberto/workspaces/workspace14diciembre/src/lcm_to_ros/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::gps_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::gps_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::gps_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::gps_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::gps_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::gps_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::gps_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e21f09763c07512fc7b4f32331812cbc";
  }

  static const char* value(const ::lcm_to_ros::gps_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe21f09763c07512fULL;
  static const uint64_t static_value2 = 0xc7b4f32331812cbcULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::gps_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/gps_data";
  }

  static const char* value(const ::lcm_to_ros::gps_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::gps_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n\
# This message was automatically generated by the lcm_to_ros package\n\
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n\
#######################################################################\n\
#\n\
# Source message:    .msg\n\
# Creation:          lun 18 feb 2019 17:14:16 CET\n\
#\n\
#######################################################################\n\
int32               timestamp_sec\n\
int32               timestamp_nsec\n\
float64             hora\n\
float64             utm_este\n\
float64             utm_norte\n\
float64             longitud\n\
float64             latitud\n\
float64             altura\n\
float64             hdop\n\
float64             velocidad\n\
float64             heading_vel\n\
float64             semi_major_desv\n\
float64             semi_minor_desv\n\
float64             semi_major_orien\n\
int8                calidad\n\
int8                nro_satelites\n\
";
  }

  static const char* value(const ::lcm_to_ros::gps_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::gps_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_sec);
      stream.next(m.timestamp_nsec);
      stream.next(m.hora);
      stream.next(m.utm_este);
      stream.next(m.utm_norte);
      stream.next(m.longitud);
      stream.next(m.latitud);
      stream.next(m.altura);
      stream.next(m.hdop);
      stream.next(m.velocidad);
      stream.next(m.heading_vel);
      stream.next(m.semi_major_desv);
      stream.next(m.semi_minor_desv);
      stream.next(m.semi_major_orien);
      stream.next(m.calidad);
      stream.next(m.nro_satelites);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gps_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::gps_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::gps_data_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_sec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp_sec);
    s << indent << "timestamp_nsec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp_nsec);
    s << indent << "hora: ";
    Printer<double>::stream(s, indent + "  ", v.hora);
    s << indent << "utm_este: ";
    Printer<double>::stream(s, indent + "  ", v.utm_este);
    s << indent << "utm_norte: ";
    Printer<double>::stream(s, indent + "  ", v.utm_norte);
    s << indent << "longitud: ";
    Printer<double>::stream(s, indent + "  ", v.longitud);
    s << indent << "latitud: ";
    Printer<double>::stream(s, indent + "  ", v.latitud);
    s << indent << "altura: ";
    Printer<double>::stream(s, indent + "  ", v.altura);
    s << indent << "hdop: ";
    Printer<double>::stream(s, indent + "  ", v.hdop);
    s << indent << "velocidad: ";
    Printer<double>::stream(s, indent + "  ", v.velocidad);
    s << indent << "heading_vel: ";
    Printer<double>::stream(s, indent + "  ", v.heading_vel);
    s << indent << "semi_major_desv: ";
    Printer<double>::stream(s, indent + "  ", v.semi_major_desv);
    s << indent << "semi_minor_desv: ";
    Printer<double>::stream(s, indent + "  ", v.semi_minor_desv);
    s << indent << "semi_major_orien: ";
    Printer<double>::stream(s, indent + "  ", v.semi_major_orien);
    s << indent << "calidad: ";
    Printer<int8_t>::stream(s, indent + "  ", v.calidad);
    s << indent << "nro_satelites: ";
    Printer<int8_t>::stream(s, indent + "  ", v.nro_satelites);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_GPS_DATA_H
