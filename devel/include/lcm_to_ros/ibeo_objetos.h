// Generated by gencpp from file lcm_to_ros/ibeo_objetos.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_IBEO_OBJETOS_H
#define LCM_TO_ROS_MESSAGE_IBEO_OBJETOS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lcm_to_ros/ibeo_objeto.h>

namespace lcm_to_ros
{
template <class ContainerAllocator>
struct ibeo_objetos_
{
  typedef ibeo_objetos_<ContainerAllocator> Type;

  ibeo_objetos_()
    : timestamp_sec(0)
    , timestamp_nsec(0)
    , n_objetos(0)
    , objetos()  {
    }
  ibeo_objetos_(const ContainerAllocator& _alloc)
    : timestamp_sec(0)
    , timestamp_nsec(0)
    , n_objetos(0)
    , objetos(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _timestamp_sec_type;
  _timestamp_sec_type timestamp_sec;

   typedef int32_t _timestamp_nsec_type;
  _timestamp_nsec_type timestamp_nsec;

   typedef int16_t _n_objetos_type;
  _n_objetos_type n_objetos;

   typedef std::vector< ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> >::other >  _objetos_type;
  _objetos_type objetos;





  typedef boost::shared_ptr< ::lcm_to_ros::ibeo_objetos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::ibeo_objetos_<ContainerAllocator> const> ConstPtr;

}; // struct ibeo_objetos_

typedef ::lcm_to_ros::ibeo_objetos_<std::allocator<void> > ibeo_objetos;

typedef boost::shared_ptr< ::lcm_to_ros::ibeo_objetos > ibeo_objetosPtr;
typedef boost::shared_ptr< ::lcm_to_ros::ibeo_objetos const> ibeo_objetosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::ibeo_objetos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::ibeo_objetos_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'lcm_to_ros': ['/home/alberto/workspaces/workspace14diciembre/src/lcm_to_ros/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::ibeo_objetos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::ibeo_objetos_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::ibeo_objetos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::ibeo_objetos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::ibeo_objetos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::ibeo_objetos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::ibeo_objetos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b4a6eb791391a2364ff9033fffb47fbe";
  }

  static const char* value(const ::lcm_to_ros::ibeo_objetos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb4a6eb791391a236ULL;
  static const uint64_t static_value2 = 0x4ff9033fffb47fbeULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::ibeo_objetos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/ibeo_objetos";
  }

  static const char* value(const ::lcm_to_ros::ibeo_objetos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::ibeo_objetos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n\
# This message was automatically generated by the lcm_to_ros package\n\
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n\
#######################################################################\n\
#\n\
# Source message:    .msg\n\
# Creation:          lun 18 feb 2019 17:14:16 CET\n\
#\n\
#######################################################################\n\
int32               timestamp_sec\n\
int32               timestamp_nsec\n\
int16               n_objetos\n\
ibeo_objeto[]       objetos\n\
\n\
================================================================================\n\
MSG: lcm_to_ros/ibeo_objeto\n\
#######################################################################\n\
# This message was automatically generated by the lcm_to_ros package\n\
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n\
#######################################################################\n\
#\n\
# Source message:    .msg\n\
# Creation:          lun 18 feb 2019 17:14:16 CET\n\
#\n\
#######################################################################\n\
int16               id\n\
float32             age\n\
float32             velocidad_relativa_x\n\
float32             velocidad_relativa_y\n\
float32             velocidad_absoluta_x\n\
float32             velocidad_absoluta_y\n\
float32             velocidad_absoluta_sigma_x\n\
float32             velocidad_absoluta_sigma_y\n\
float32             bounding_box_centro_x\n\
float32             bounding_box_centro_y\n\
float32             bounding_box_largo\n\
float32             bounding_box_ancho\n\
float32             object_box_centro_x\n\
float32             object_box_centro_y\n\
float32             object_box_orientacion\n\
float32             object_box_size_x\n\
float32             object_box_size_y\n\
int16               clasificacion\n\
float32             clasificacion_age\n\
float32             clasificacion_certeza\n\
float32             punto_cercano_x\n\
float32             punto_cercano_y\n\
float32             punto_referencia_x\n\
float32             punto_referencia_y\n\
float32             punto_referencia_sigma_x\n\
float32             punto_referencia_sigma_y\n\
";
  }

  static const char* value(const ::lcm_to_ros::ibeo_objetos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::ibeo_objetos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_sec);
      stream.next(m.timestamp_nsec);
      stream.next(m.n_objetos);
      stream.next(m.objetos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ibeo_objetos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::ibeo_objetos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::ibeo_objetos_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_sec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp_sec);
    s << indent << "timestamp_nsec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp_nsec);
    s << indent << "n_objetos: ";
    Printer<int16_t>::stream(s, indent + "  ", v.n_objetos);
    s << indent << "objetos[]" << std::endl;
    for (size_t i = 0; i < v.objetos.size(); ++i)
    {
      s << indent << "  objetos[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> >::stream(s, indent + "    ", v.objetos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_IBEO_OBJETOS_H
