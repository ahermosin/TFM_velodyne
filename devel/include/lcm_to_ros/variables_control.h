// Generated by gencpp from file lcm_to_ros/variables_control.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_VARIABLES_CONTROL_H
#define LCM_TO_ROS_MESSAGE_VARIABLES_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct variables_control_
{
  typedef variables_control_<ContainerAllocator> Type;

  variables_control_()
    : tiempo(0.0)
    , deriva(0.0)
    , cabeceo(0.0)
    , curvatura(0.0)
    , velocidad(0.0)
    , velocidad_consigna(0.0)  {
    }
  variables_control_(const ContainerAllocator& _alloc)
    : tiempo(0.0)
    , deriva(0.0)
    , cabeceo(0.0)
    , curvatura(0.0)
    , velocidad(0.0)
    , velocidad_consigna(0.0)  {
  (void)_alloc;
    }



   typedef double _tiempo_type;
  _tiempo_type tiempo;

   typedef double _deriva_type;
  _deriva_type deriva;

   typedef double _cabeceo_type;
  _cabeceo_type cabeceo;

   typedef double _curvatura_type;
  _curvatura_type curvatura;

   typedef double _velocidad_type;
  _velocidad_type velocidad;

   typedef double _velocidad_consigna_type;
  _velocidad_consigna_type velocidad_consigna;





  typedef boost::shared_ptr< ::lcm_to_ros::variables_control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::variables_control_<ContainerAllocator> const> ConstPtr;

}; // struct variables_control_

typedef ::lcm_to_ros::variables_control_<std::allocator<void> > variables_control;

typedef boost::shared_ptr< ::lcm_to_ros::variables_control > variables_controlPtr;
typedef boost::shared_ptr< ::lcm_to_ros::variables_control const> variables_controlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::variables_control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::variables_control_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'lcm_to_ros': ['/home/alberto/workspaces/workspace14diciembre/src/lcm_to_ros/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::variables_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::variables_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::variables_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::variables_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::variables_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::variables_control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::variables_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d53f02eaa996b1eb6728f13ae0c3580";
  }

  static const char* value(const ::lcm_to_ros::variables_control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d53f02eaa996b1eULL;
  static const uint64_t static_value2 = 0xb6728f13ae0c3580ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::variables_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/variables_control";
  }

  static const char* value(const ::lcm_to_ros::variables_control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::variables_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n\
# This message was automatically generated by the lcm_to_ros package\n\
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n\
#######################################################################\n\
#\n\
# Source message:    .msg\n\
# Creation:          lun 18 feb 2019 17:14:17 CET\n\
#\n\
#######################################################################\n\
float64             tiempo\n\
float64             deriva\n\
float64             cabeceo\n\
float64             curvatura\n\
float64             velocidad\n\
float64             velocidad_consigna\n\
                    \n\
";
  }

  static const char* value(const ::lcm_to_ros::variables_control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::variables_control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tiempo);
      stream.next(m.deriva);
      stream.next(m.cabeceo);
      stream.next(m.curvatura);
      stream.next(m.velocidad);
      stream.next(m.velocidad_consigna);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct variables_control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::variables_control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::variables_control_<ContainerAllocator>& v)
  {
    s << indent << "tiempo: ";
    Printer<double>::stream(s, indent + "  ", v.tiempo);
    s << indent << "deriva: ";
    Printer<double>::stream(s, indent + "  ", v.deriva);
    s << indent << "cabeceo: ";
    Printer<double>::stream(s, indent + "  ", v.cabeceo);
    s << indent << "curvatura: ";
    Printer<double>::stream(s, indent + "  ", v.curvatura);
    s << indent << "velocidad: ";
    Printer<double>::stream(s, indent + "  ", v.velocidad);
    s << indent << "velocidad_consigna: ";
    Printer<double>::stream(s, indent + "  ", v.velocidad_consigna);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_VARIABLES_CONTROL_H
