// Generated by gencpp from file lcm_to_ros/ibeo_objeto.msg
// DO NOT EDIT!


#ifndef LCM_TO_ROS_MESSAGE_IBEO_OBJETO_H
#define LCM_TO_ROS_MESSAGE_IBEO_OBJETO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lcm_to_ros
{
template <class ContainerAllocator>
struct ibeo_objeto_
{
  typedef ibeo_objeto_<ContainerAllocator> Type;

  ibeo_objeto_()
    : id(0)
    , age(0.0)
    , velocidad_relativa_x(0.0)
    , velocidad_relativa_y(0.0)
    , velocidad_absoluta_x(0.0)
    , velocidad_absoluta_y(0.0)
    , velocidad_absoluta_sigma_x(0.0)
    , velocidad_absoluta_sigma_y(0.0)
    , bounding_box_centro_x(0.0)
    , bounding_box_centro_y(0.0)
    , bounding_box_largo(0.0)
    , bounding_box_ancho(0.0)
    , object_box_centro_x(0.0)
    , object_box_centro_y(0.0)
    , object_box_orientacion(0.0)
    , object_box_size_x(0.0)
    , object_box_size_y(0.0)
    , clasificacion(0)
    , clasificacion_age(0.0)
    , clasificacion_certeza(0.0)
    , punto_cercano_x(0.0)
    , punto_cercano_y(0.0)
    , punto_referencia_x(0.0)
    , punto_referencia_y(0.0)
    , punto_referencia_sigma_x(0.0)
    , punto_referencia_sigma_y(0.0)  {
    }
  ibeo_objeto_(const ContainerAllocator& _alloc)
    : id(0)
    , age(0.0)
    , velocidad_relativa_x(0.0)
    , velocidad_relativa_y(0.0)
    , velocidad_absoluta_x(0.0)
    , velocidad_absoluta_y(0.0)
    , velocidad_absoluta_sigma_x(0.0)
    , velocidad_absoluta_sigma_y(0.0)
    , bounding_box_centro_x(0.0)
    , bounding_box_centro_y(0.0)
    , bounding_box_largo(0.0)
    , bounding_box_ancho(0.0)
    , object_box_centro_x(0.0)
    , object_box_centro_y(0.0)
    , object_box_orientacion(0.0)
    , object_box_size_x(0.0)
    , object_box_size_y(0.0)
    , clasificacion(0)
    , clasificacion_age(0.0)
    , clasificacion_certeza(0.0)
    , punto_cercano_x(0.0)
    , punto_cercano_y(0.0)
    , punto_referencia_x(0.0)
    , punto_referencia_y(0.0)
    , punto_referencia_sigma_x(0.0)
    , punto_referencia_sigma_y(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _id_type;
  _id_type id;

   typedef float _age_type;
  _age_type age;

   typedef float _velocidad_relativa_x_type;
  _velocidad_relativa_x_type velocidad_relativa_x;

   typedef float _velocidad_relativa_y_type;
  _velocidad_relativa_y_type velocidad_relativa_y;

   typedef float _velocidad_absoluta_x_type;
  _velocidad_absoluta_x_type velocidad_absoluta_x;

   typedef float _velocidad_absoluta_y_type;
  _velocidad_absoluta_y_type velocidad_absoluta_y;

   typedef float _velocidad_absoluta_sigma_x_type;
  _velocidad_absoluta_sigma_x_type velocidad_absoluta_sigma_x;

   typedef float _velocidad_absoluta_sigma_y_type;
  _velocidad_absoluta_sigma_y_type velocidad_absoluta_sigma_y;

   typedef float _bounding_box_centro_x_type;
  _bounding_box_centro_x_type bounding_box_centro_x;

   typedef float _bounding_box_centro_y_type;
  _bounding_box_centro_y_type bounding_box_centro_y;

   typedef float _bounding_box_largo_type;
  _bounding_box_largo_type bounding_box_largo;

   typedef float _bounding_box_ancho_type;
  _bounding_box_ancho_type bounding_box_ancho;

   typedef float _object_box_centro_x_type;
  _object_box_centro_x_type object_box_centro_x;

   typedef float _object_box_centro_y_type;
  _object_box_centro_y_type object_box_centro_y;

   typedef float _object_box_orientacion_type;
  _object_box_orientacion_type object_box_orientacion;

   typedef float _object_box_size_x_type;
  _object_box_size_x_type object_box_size_x;

   typedef float _object_box_size_y_type;
  _object_box_size_y_type object_box_size_y;

   typedef int16_t _clasificacion_type;
  _clasificacion_type clasificacion;

   typedef float _clasificacion_age_type;
  _clasificacion_age_type clasificacion_age;

   typedef float _clasificacion_certeza_type;
  _clasificacion_certeza_type clasificacion_certeza;

   typedef float _punto_cercano_x_type;
  _punto_cercano_x_type punto_cercano_x;

   typedef float _punto_cercano_y_type;
  _punto_cercano_y_type punto_cercano_y;

   typedef float _punto_referencia_x_type;
  _punto_referencia_x_type punto_referencia_x;

   typedef float _punto_referencia_y_type;
  _punto_referencia_y_type punto_referencia_y;

   typedef float _punto_referencia_sigma_x_type;
  _punto_referencia_sigma_x_type punto_referencia_sigma_x;

   typedef float _punto_referencia_sigma_y_type;
  _punto_referencia_sigma_y_type punto_referencia_sigma_y;





  typedef boost::shared_ptr< ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> const> ConstPtr;

}; // struct ibeo_objeto_

typedef ::lcm_to_ros::ibeo_objeto_<std::allocator<void> > ibeo_objeto;

typedef boost::shared_ptr< ::lcm_to_ros::ibeo_objeto > ibeo_objetoPtr;
typedef boost::shared_ptr< ::lcm_to_ros::ibeo_objeto const> ibeo_objetoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lcm_to_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'lcm_to_ros': ['/home/alberto/workspaces/workspace14diciembre/src/lcm_to_ros/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f05d4f8d7f4f7ef27109cc9e3a63af19";
  }

  static const char* value(const ::lcm_to_ros::ibeo_objeto_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf05d4f8d7f4f7ef2ULL;
  static const uint64_t static_value2 = 0x7109cc9e3a63af19ULL;
};

template<class ContainerAllocator>
struct DataType< ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lcm_to_ros/ibeo_objeto";
  }

  static const char* value(const ::lcm_to_ros::ibeo_objeto_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#######################################################################\n\
# This message was automatically generated by the lcm_to_ros package\n\
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu\n\
#######################################################################\n\
#\n\
# Source message:    .msg\n\
# Creation:          lun 18 feb 2019 17:14:16 CET\n\
#\n\
#######################################################################\n\
int16               id\n\
float32             age\n\
float32             velocidad_relativa_x\n\
float32             velocidad_relativa_y\n\
float32             velocidad_absoluta_x\n\
float32             velocidad_absoluta_y\n\
float32             velocidad_absoluta_sigma_x\n\
float32             velocidad_absoluta_sigma_y\n\
float32             bounding_box_centro_x\n\
float32             bounding_box_centro_y\n\
float32             bounding_box_largo\n\
float32             bounding_box_ancho\n\
float32             object_box_centro_x\n\
float32             object_box_centro_y\n\
float32             object_box_orientacion\n\
float32             object_box_size_x\n\
float32             object_box_size_y\n\
int16               clasificacion\n\
float32             clasificacion_age\n\
float32             clasificacion_certeza\n\
float32             punto_cercano_x\n\
float32             punto_cercano_y\n\
float32             punto_referencia_x\n\
float32             punto_referencia_y\n\
float32             punto_referencia_sigma_x\n\
float32             punto_referencia_sigma_y\n\
";
  }

  static const char* value(const ::lcm_to_ros::ibeo_objeto_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.age);
      stream.next(m.velocidad_relativa_x);
      stream.next(m.velocidad_relativa_y);
      stream.next(m.velocidad_absoluta_x);
      stream.next(m.velocidad_absoluta_y);
      stream.next(m.velocidad_absoluta_sigma_x);
      stream.next(m.velocidad_absoluta_sigma_y);
      stream.next(m.bounding_box_centro_x);
      stream.next(m.bounding_box_centro_y);
      stream.next(m.bounding_box_largo);
      stream.next(m.bounding_box_ancho);
      stream.next(m.object_box_centro_x);
      stream.next(m.object_box_centro_y);
      stream.next(m.object_box_orientacion);
      stream.next(m.object_box_size_x);
      stream.next(m.object_box_size_y);
      stream.next(m.clasificacion);
      stream.next(m.clasificacion_age);
      stream.next(m.clasificacion_certeza);
      stream.next(m.punto_cercano_x);
      stream.next(m.punto_cercano_y);
      stream.next(m.punto_referencia_x);
      stream.next(m.punto_referencia_y);
      stream.next(m.punto_referencia_sigma_x);
      stream.next(m.punto_referencia_sigma_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ibeo_objeto_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lcm_to_ros::ibeo_objeto_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lcm_to_ros::ibeo_objeto_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.id);
    s << indent << "age: ";
    Printer<float>::stream(s, indent + "  ", v.age);
    s << indent << "velocidad_relativa_x: ";
    Printer<float>::stream(s, indent + "  ", v.velocidad_relativa_x);
    s << indent << "velocidad_relativa_y: ";
    Printer<float>::stream(s, indent + "  ", v.velocidad_relativa_y);
    s << indent << "velocidad_absoluta_x: ";
    Printer<float>::stream(s, indent + "  ", v.velocidad_absoluta_x);
    s << indent << "velocidad_absoluta_y: ";
    Printer<float>::stream(s, indent + "  ", v.velocidad_absoluta_y);
    s << indent << "velocidad_absoluta_sigma_x: ";
    Printer<float>::stream(s, indent + "  ", v.velocidad_absoluta_sigma_x);
    s << indent << "velocidad_absoluta_sigma_y: ";
    Printer<float>::stream(s, indent + "  ", v.velocidad_absoluta_sigma_y);
    s << indent << "bounding_box_centro_x: ";
    Printer<float>::stream(s, indent + "  ", v.bounding_box_centro_x);
    s << indent << "bounding_box_centro_y: ";
    Printer<float>::stream(s, indent + "  ", v.bounding_box_centro_y);
    s << indent << "bounding_box_largo: ";
    Printer<float>::stream(s, indent + "  ", v.bounding_box_largo);
    s << indent << "bounding_box_ancho: ";
    Printer<float>::stream(s, indent + "  ", v.bounding_box_ancho);
    s << indent << "object_box_centro_x: ";
    Printer<float>::stream(s, indent + "  ", v.object_box_centro_x);
    s << indent << "object_box_centro_y: ";
    Printer<float>::stream(s, indent + "  ", v.object_box_centro_y);
    s << indent << "object_box_orientacion: ";
    Printer<float>::stream(s, indent + "  ", v.object_box_orientacion);
    s << indent << "object_box_size_x: ";
    Printer<float>::stream(s, indent + "  ", v.object_box_size_x);
    s << indent << "object_box_size_y: ";
    Printer<float>::stream(s, indent + "  ", v.object_box_size_y);
    s << indent << "clasificacion: ";
    Printer<int16_t>::stream(s, indent + "  ", v.clasificacion);
    s << indent << "clasificacion_age: ";
    Printer<float>::stream(s, indent + "  ", v.clasificacion_age);
    s << indent << "clasificacion_certeza: ";
    Printer<float>::stream(s, indent + "  ", v.clasificacion_certeza);
    s << indent << "punto_cercano_x: ";
    Printer<float>::stream(s, indent + "  ", v.punto_cercano_x);
    s << indent << "punto_cercano_y: ";
    Printer<float>::stream(s, indent + "  ", v.punto_cercano_y);
    s << indent << "punto_referencia_x: ";
    Printer<float>::stream(s, indent + "  ", v.punto_referencia_x);
    s << indent << "punto_referencia_y: ";
    Printer<float>::stream(s, indent + "  ", v.punto_referencia_y);
    s << indent << "punto_referencia_sigma_x: ";
    Printer<float>::stream(s, indent + "  ", v.punto_referencia_sigma_x);
    s << indent << "punto_referencia_sigma_y: ";
    Printer<float>::stream(s, indent + "  ", v.punto_referencia_sigma_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LCM_TO_ROS_MESSAGE_IBEO_OBJETO_H
