# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcm_to_ros/imu_all.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class imu_all(genpy.Message):
  _md5sum = "ec9945e7705b83f3d7cbfa676d070663"
  _type = "lcm_to_ros/imu_all"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          lun 18 feb 2019 17:14:16 CET
#
#######################################################################
int32               Timestamp_sec
int32               Timestamp_nsec
float64             Roll
float64             Pitch
float64             Yaw
float64             Wx
float64             Wy
float64             Wz
float64             AcelX
float64             AcelY
float64             AcelZ
float64             VelN
float64             VelE
float64             VelZ
float64             GPSLong
float64             GPSLat
float64             GPSAlt
float64             Temp
int32               IMUTime
int16               BITStatus
"""
  __slots__ = ['Timestamp_sec','Timestamp_nsec','Roll','Pitch','Yaw','Wx','Wy','Wz','AcelX','AcelY','AcelZ','VelN','VelE','VelZ','GPSLong','GPSLat','GPSAlt','Temp','IMUTime','BITStatus']
  _slot_types = ['int32','int32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int32','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Timestamp_sec,Timestamp_nsec,Roll,Pitch,Yaw,Wx,Wy,Wz,AcelX,AcelY,AcelZ,VelN,VelE,VelZ,GPSLong,GPSLat,GPSAlt,Temp,IMUTime,BITStatus

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(imu_all, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Timestamp_sec is None:
        self.Timestamp_sec = 0
      if self.Timestamp_nsec is None:
        self.Timestamp_nsec = 0
      if self.Roll is None:
        self.Roll = 0.
      if self.Pitch is None:
        self.Pitch = 0.
      if self.Yaw is None:
        self.Yaw = 0.
      if self.Wx is None:
        self.Wx = 0.
      if self.Wy is None:
        self.Wy = 0.
      if self.Wz is None:
        self.Wz = 0.
      if self.AcelX is None:
        self.AcelX = 0.
      if self.AcelY is None:
        self.AcelY = 0.
      if self.AcelZ is None:
        self.AcelZ = 0.
      if self.VelN is None:
        self.VelN = 0.
      if self.VelE is None:
        self.VelE = 0.
      if self.VelZ is None:
        self.VelZ = 0.
      if self.GPSLong is None:
        self.GPSLong = 0.
      if self.GPSLat is None:
        self.GPSLat = 0.
      if self.GPSAlt is None:
        self.GPSAlt = 0.
      if self.Temp is None:
        self.Temp = 0.
      if self.IMUTime is None:
        self.IMUTime = 0
      if self.BITStatus is None:
        self.BITStatus = 0
    else:
      self.Timestamp_sec = 0
      self.Timestamp_nsec = 0
      self.Roll = 0.
      self.Pitch = 0.
      self.Yaw = 0.
      self.Wx = 0.
      self.Wy = 0.
      self.Wz = 0.
      self.AcelX = 0.
      self.AcelY = 0.
      self.AcelZ = 0.
      self.VelN = 0.
      self.VelE = 0.
      self.VelZ = 0.
      self.GPSLong = 0.
      self.GPSLat = 0.
      self.GPSAlt = 0.
      self.Temp = 0.
      self.IMUTime = 0
      self.BITStatus = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i16dih().pack(_x.Timestamp_sec, _x.Timestamp_nsec, _x.Roll, _x.Pitch, _x.Yaw, _x.Wx, _x.Wy, _x.Wz, _x.AcelX, _x.AcelY, _x.AcelZ, _x.VelN, _x.VelE, _x.VelZ, _x.GPSLong, _x.GPSLat, _x.GPSAlt, _x.Temp, _x.IMUTime, _x.BITStatus))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 142
      (_x.Timestamp_sec, _x.Timestamp_nsec, _x.Roll, _x.Pitch, _x.Yaw, _x.Wx, _x.Wy, _x.Wz, _x.AcelX, _x.AcelY, _x.AcelZ, _x.VelN, _x.VelE, _x.VelZ, _x.GPSLong, _x.GPSLat, _x.GPSAlt, _x.Temp, _x.IMUTime, _x.BITStatus,) = _get_struct_2i16dih().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i16dih().pack(_x.Timestamp_sec, _x.Timestamp_nsec, _x.Roll, _x.Pitch, _x.Yaw, _x.Wx, _x.Wy, _x.Wz, _x.AcelX, _x.AcelY, _x.AcelZ, _x.VelN, _x.VelE, _x.VelZ, _x.GPSLong, _x.GPSLat, _x.GPSAlt, _x.Temp, _x.IMUTime, _x.BITStatus))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 142
      (_x.Timestamp_sec, _x.Timestamp_nsec, _x.Roll, _x.Pitch, _x.Yaw, _x.Wx, _x.Wy, _x.Wz, _x.AcelX, _x.AcelY, _x.AcelZ, _x.VelN, _x.VelE, _x.VelZ, _x.GPSLong, _x.GPSLat, _x.GPSAlt, _x.Temp, _x.IMUTime, _x.BITStatus,) = _get_struct_2i16dih().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i16dih = None
def _get_struct_2i16dih():
    global _struct_2i16dih
    if _struct_2i16dih is None:
        _struct_2i16dih = struct.Struct("<2i16dih")
    return _struct_2i16dih
