# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcm_to_ros/ibeo_objeto.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ibeo_objeto(genpy.Message):
  _md5sum = "f05d4f8d7f4f7ef27109cc9e3a63af19"
  _type = "lcm_to_ros/ibeo_objeto"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          lun 18 feb 2019 17:14:16 CET
#
#######################################################################
int16               id
float32             age
float32             velocidad_relativa_x
float32             velocidad_relativa_y
float32             velocidad_absoluta_x
float32             velocidad_absoluta_y
float32             velocidad_absoluta_sigma_x
float32             velocidad_absoluta_sigma_y
float32             bounding_box_centro_x
float32             bounding_box_centro_y
float32             bounding_box_largo
float32             bounding_box_ancho
float32             object_box_centro_x
float32             object_box_centro_y
float32             object_box_orientacion
float32             object_box_size_x
float32             object_box_size_y
int16               clasificacion
float32             clasificacion_age
float32             clasificacion_certeza
float32             punto_cercano_x
float32             punto_cercano_y
float32             punto_referencia_x
float32             punto_referencia_y
float32             punto_referencia_sigma_x
float32             punto_referencia_sigma_y
"""
  __slots__ = ['id','age','velocidad_relativa_x','velocidad_relativa_y','velocidad_absoluta_x','velocidad_absoluta_y','velocidad_absoluta_sigma_x','velocidad_absoluta_sigma_y','bounding_box_centro_x','bounding_box_centro_y','bounding_box_largo','bounding_box_ancho','object_box_centro_x','object_box_centro_y','object_box_orientacion','object_box_size_x','object_box_size_y','clasificacion','clasificacion_age','clasificacion_certeza','punto_cercano_x','punto_cercano_y','punto_referencia_x','punto_referencia_y','punto_referencia_sigma_x','punto_referencia_sigma_y']
  _slot_types = ['int16','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int16','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,age,velocidad_relativa_x,velocidad_relativa_y,velocidad_absoluta_x,velocidad_absoluta_y,velocidad_absoluta_sigma_x,velocidad_absoluta_sigma_y,bounding_box_centro_x,bounding_box_centro_y,bounding_box_largo,bounding_box_ancho,object_box_centro_x,object_box_centro_y,object_box_orientacion,object_box_size_x,object_box_size_y,clasificacion,clasificacion_age,clasificacion_certeza,punto_cercano_x,punto_cercano_y,punto_referencia_x,punto_referencia_y,punto_referencia_sigma_x,punto_referencia_sigma_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ibeo_objeto, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.age is None:
        self.age = 0.
      if self.velocidad_relativa_x is None:
        self.velocidad_relativa_x = 0.
      if self.velocidad_relativa_y is None:
        self.velocidad_relativa_y = 0.
      if self.velocidad_absoluta_x is None:
        self.velocidad_absoluta_x = 0.
      if self.velocidad_absoluta_y is None:
        self.velocidad_absoluta_y = 0.
      if self.velocidad_absoluta_sigma_x is None:
        self.velocidad_absoluta_sigma_x = 0.
      if self.velocidad_absoluta_sigma_y is None:
        self.velocidad_absoluta_sigma_y = 0.
      if self.bounding_box_centro_x is None:
        self.bounding_box_centro_x = 0.
      if self.bounding_box_centro_y is None:
        self.bounding_box_centro_y = 0.
      if self.bounding_box_largo is None:
        self.bounding_box_largo = 0.
      if self.bounding_box_ancho is None:
        self.bounding_box_ancho = 0.
      if self.object_box_centro_x is None:
        self.object_box_centro_x = 0.
      if self.object_box_centro_y is None:
        self.object_box_centro_y = 0.
      if self.object_box_orientacion is None:
        self.object_box_orientacion = 0.
      if self.object_box_size_x is None:
        self.object_box_size_x = 0.
      if self.object_box_size_y is None:
        self.object_box_size_y = 0.
      if self.clasificacion is None:
        self.clasificacion = 0
      if self.clasificacion_age is None:
        self.clasificacion_age = 0.
      if self.clasificacion_certeza is None:
        self.clasificacion_certeza = 0.
      if self.punto_cercano_x is None:
        self.punto_cercano_x = 0.
      if self.punto_cercano_y is None:
        self.punto_cercano_y = 0.
      if self.punto_referencia_x is None:
        self.punto_referencia_x = 0.
      if self.punto_referencia_y is None:
        self.punto_referencia_y = 0.
      if self.punto_referencia_sigma_x is None:
        self.punto_referencia_sigma_x = 0.
      if self.punto_referencia_sigma_y is None:
        self.punto_referencia_sigma_y = 0.
    else:
      self.id = 0
      self.age = 0.
      self.velocidad_relativa_x = 0.
      self.velocidad_relativa_y = 0.
      self.velocidad_absoluta_x = 0.
      self.velocidad_absoluta_y = 0.
      self.velocidad_absoluta_sigma_x = 0.
      self.velocidad_absoluta_sigma_y = 0.
      self.bounding_box_centro_x = 0.
      self.bounding_box_centro_y = 0.
      self.bounding_box_largo = 0.
      self.bounding_box_ancho = 0.
      self.object_box_centro_x = 0.
      self.object_box_centro_y = 0.
      self.object_box_orientacion = 0.
      self.object_box_size_x = 0.
      self.object_box_size_y = 0.
      self.clasificacion = 0
      self.clasificacion_age = 0.
      self.clasificacion_certeza = 0.
      self.punto_cercano_x = 0.
      self.punto_cercano_y = 0.
      self.punto_referencia_x = 0.
      self.punto_referencia_y = 0.
      self.punto_referencia_sigma_x = 0.
      self.punto_referencia_sigma_y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_h16fh8f().pack(_x.id, _x.age, _x.velocidad_relativa_x, _x.velocidad_relativa_y, _x.velocidad_absoluta_x, _x.velocidad_absoluta_y, _x.velocidad_absoluta_sigma_x, _x.velocidad_absoluta_sigma_y, _x.bounding_box_centro_x, _x.bounding_box_centro_y, _x.bounding_box_largo, _x.bounding_box_ancho, _x.object_box_centro_x, _x.object_box_centro_y, _x.object_box_orientacion, _x.object_box_size_x, _x.object_box_size_y, _x.clasificacion, _x.clasificacion_age, _x.clasificacion_certeza, _x.punto_cercano_x, _x.punto_cercano_y, _x.punto_referencia_x, _x.punto_referencia_y, _x.punto_referencia_sigma_x, _x.punto_referencia_sigma_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 100
      (_x.id, _x.age, _x.velocidad_relativa_x, _x.velocidad_relativa_y, _x.velocidad_absoluta_x, _x.velocidad_absoluta_y, _x.velocidad_absoluta_sigma_x, _x.velocidad_absoluta_sigma_y, _x.bounding_box_centro_x, _x.bounding_box_centro_y, _x.bounding_box_largo, _x.bounding_box_ancho, _x.object_box_centro_x, _x.object_box_centro_y, _x.object_box_orientacion, _x.object_box_size_x, _x.object_box_size_y, _x.clasificacion, _x.clasificacion_age, _x.clasificacion_certeza, _x.punto_cercano_x, _x.punto_cercano_y, _x.punto_referencia_x, _x.punto_referencia_y, _x.punto_referencia_sigma_x, _x.punto_referencia_sigma_y,) = _get_struct_h16fh8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_h16fh8f().pack(_x.id, _x.age, _x.velocidad_relativa_x, _x.velocidad_relativa_y, _x.velocidad_absoluta_x, _x.velocidad_absoluta_y, _x.velocidad_absoluta_sigma_x, _x.velocidad_absoluta_sigma_y, _x.bounding_box_centro_x, _x.bounding_box_centro_y, _x.bounding_box_largo, _x.bounding_box_ancho, _x.object_box_centro_x, _x.object_box_centro_y, _x.object_box_orientacion, _x.object_box_size_x, _x.object_box_size_y, _x.clasificacion, _x.clasificacion_age, _x.clasificacion_certeza, _x.punto_cercano_x, _x.punto_cercano_y, _x.punto_referencia_x, _x.punto_referencia_y, _x.punto_referencia_sigma_x, _x.punto_referencia_sigma_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 100
      (_x.id, _x.age, _x.velocidad_relativa_x, _x.velocidad_relativa_y, _x.velocidad_absoluta_x, _x.velocidad_absoluta_y, _x.velocidad_absoluta_sigma_x, _x.velocidad_absoluta_sigma_y, _x.bounding_box_centro_x, _x.bounding_box_centro_y, _x.bounding_box_largo, _x.bounding_box_ancho, _x.object_box_centro_x, _x.object_box_centro_y, _x.object_box_orientacion, _x.object_box_size_x, _x.object_box_size_y, _x.clasificacion, _x.clasificacion_age, _x.clasificacion_certeza, _x.punto_cercano_x, _x.punto_cercano_y, _x.punto_referencia_x, _x.punto_referencia_y, _x.punto_referencia_sigma_x, _x.punto_referencia_sigma_y,) = _get_struct_h16fh8f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_h16fh8f = None
def _get_struct_h16fh8f():
    global _struct_h16fh8f
    if _struct_h16fh8f is None:
        _struct_h16fh8f = struct.Struct("<h16fh8f")
    return _struct_h16fh8f
