# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcm_to_ros/mobileye_obstaculo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class mobileye_obstaculo(genpy.Message):
  _md5sum = "089b186e41a459d4bb6e84f175bf79ab"
  _type = "lcm_to_ros/mobileye_obstaculo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          lun 18 feb 2019 17:14:17 CET
#
#######################################################################
int32               timestamp_sec
int32               timestamp_nsec
float32             posicionX
float32             posicionY
float32             velocidadRel
float32             aceleracionX
float32             longitud
float32             ancho
float32             angulo
float32             angleRate
float32             scaleChange
int16               edad
byte                id
byte                tipo
byte                status
byte                carril
byte                flags
byte                intermitentes
byte                cutInOut
"""
  __slots__ = ['timestamp_sec','timestamp_nsec','posicionX','posicionY','velocidadRel','aceleracionX','longitud','ancho','angulo','angleRate','scaleChange','edad','id','tipo','status','carril','flags','intermitentes','cutInOut']
  _slot_types = ['int32','int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int16','byte','byte','byte','byte','byte','byte','byte']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp_sec,timestamp_nsec,posicionX,posicionY,velocidadRel,aceleracionX,longitud,ancho,angulo,angleRate,scaleChange,edad,id,tipo,status,carril,flags,intermitentes,cutInOut

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mobileye_obstaculo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp_sec is None:
        self.timestamp_sec = 0
      if self.timestamp_nsec is None:
        self.timestamp_nsec = 0
      if self.posicionX is None:
        self.posicionX = 0.
      if self.posicionY is None:
        self.posicionY = 0.
      if self.velocidadRel is None:
        self.velocidadRel = 0.
      if self.aceleracionX is None:
        self.aceleracionX = 0.
      if self.longitud is None:
        self.longitud = 0.
      if self.ancho is None:
        self.ancho = 0.
      if self.angulo is None:
        self.angulo = 0.
      if self.angleRate is None:
        self.angleRate = 0.
      if self.scaleChange is None:
        self.scaleChange = 0.
      if self.edad is None:
        self.edad = 0
      if self.id is None:
        self.id = 0
      if self.tipo is None:
        self.tipo = 0
      if self.status is None:
        self.status = 0
      if self.carril is None:
        self.carril = 0
      if self.flags is None:
        self.flags = 0
      if self.intermitentes is None:
        self.intermitentes = 0
      if self.cutInOut is None:
        self.cutInOut = 0
    else:
      self.timestamp_sec = 0
      self.timestamp_nsec = 0
      self.posicionX = 0.
      self.posicionY = 0.
      self.velocidadRel = 0.
      self.aceleracionX = 0.
      self.longitud = 0.
      self.ancho = 0.
      self.angulo = 0.
      self.angleRate = 0.
      self.scaleChange = 0.
      self.edad = 0
      self.id = 0
      self.tipo = 0
      self.status = 0
      self.carril = 0
      self.flags = 0
      self.intermitentes = 0
      self.cutInOut = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i9fh7b().pack(_x.timestamp_sec, _x.timestamp_nsec, _x.posicionX, _x.posicionY, _x.velocidadRel, _x.aceleracionX, _x.longitud, _x.ancho, _x.angulo, _x.angleRate, _x.scaleChange, _x.edad, _x.id, _x.tipo, _x.status, _x.carril, _x.flags, _x.intermitentes, _x.cutInOut))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 53
      (_x.timestamp_sec, _x.timestamp_nsec, _x.posicionX, _x.posicionY, _x.velocidadRel, _x.aceleracionX, _x.longitud, _x.ancho, _x.angulo, _x.angleRate, _x.scaleChange, _x.edad, _x.id, _x.tipo, _x.status, _x.carril, _x.flags, _x.intermitentes, _x.cutInOut,) = _get_struct_2i9fh7b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i9fh7b().pack(_x.timestamp_sec, _x.timestamp_nsec, _x.posicionX, _x.posicionY, _x.velocidadRel, _x.aceleracionX, _x.longitud, _x.ancho, _x.angulo, _x.angleRate, _x.scaleChange, _x.edad, _x.id, _x.tipo, _x.status, _x.carril, _x.flags, _x.intermitentes, _x.cutInOut))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 53
      (_x.timestamp_sec, _x.timestamp_nsec, _x.posicionX, _x.posicionY, _x.velocidadRel, _x.aceleracionX, _x.longitud, _x.ancho, _x.angulo, _x.angleRate, _x.scaleChange, _x.edad, _x.id, _x.tipo, _x.status, _x.carril, _x.flags, _x.intermitentes, _x.cutInOut,) = _get_struct_2i9fh7b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i9fh7b = None
def _get_struct_2i9fh7b():
    global _struct_2i9fh7b
    if _struct_2i9fh7b is None:
        _struct_2i9fh7b = struct.Struct("<2i9fh7b")
    return _struct_2i9fh7b
