# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcm_to_ros/can_coche_caja.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class can_coche_caja(genpy.Message):
  _md5sum = "ea467c83106b332ce7b80a81a2e4ae2f"
  _type = "lcm_to_ros/can_coche_caja"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          lun 18 feb 2019 17:14:15 CET
#
#######################################################################
int32               timestamp_sec
int32               timestamp_nsec
int8                marcha_palanca
int8                marcha_actual
bool                modo_auto
"""
  __slots__ = ['timestamp_sec','timestamp_nsec','marcha_palanca','marcha_actual','modo_auto']
  _slot_types = ['int32','int32','int8','int8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp_sec,timestamp_nsec,marcha_palanca,marcha_actual,modo_auto

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(can_coche_caja, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp_sec is None:
        self.timestamp_sec = 0
      if self.timestamp_nsec is None:
        self.timestamp_nsec = 0
      if self.marcha_palanca is None:
        self.marcha_palanca = 0
      if self.marcha_actual is None:
        self.marcha_actual = 0
      if self.modo_auto is None:
        self.modo_auto = False
    else:
      self.timestamp_sec = 0
      self.timestamp_nsec = 0
      self.marcha_palanca = 0
      self.marcha_actual = 0
      self.modo_auto = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i2bB().pack(_x.timestamp_sec, _x.timestamp_nsec, _x.marcha_palanca, _x.marcha_actual, _x.modo_auto))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.timestamp_sec, _x.timestamp_nsec, _x.marcha_palanca, _x.marcha_actual, _x.modo_auto,) = _get_struct_2i2bB().unpack(str[start:end])
      self.modo_auto = bool(self.modo_auto)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i2bB().pack(_x.timestamp_sec, _x.timestamp_nsec, _x.marcha_palanca, _x.marcha_actual, _x.modo_auto))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.timestamp_sec, _x.timestamp_nsec, _x.marcha_palanca, _x.marcha_actual, _x.modo_auto,) = _get_struct_2i2bB().unpack(str[start:end])
      self.modo_auto = bool(self.modo_auto)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i2bB = None
def _get_struct_2i2bB():
    global _struct_2i2bB
    if _struct_2i2bB is None:
        _struct_2i2bB = struct.Struct("<2i2bB")
    return _struct_2i2bB
