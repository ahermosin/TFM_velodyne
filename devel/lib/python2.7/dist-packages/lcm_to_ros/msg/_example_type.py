# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcm_to_ros/example_type.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import lcm_to_ros.msg

class example_type(genpy.Message):
  _md5sum = "1dc0698e415584c20abf27e7abb42161"
  _type = "lcm_to_ros/example_type"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          jue 07 mar 2019 13:27:48 CET
#
#######################################################################
string              str
bool                flag
byte                gnash
int8                i8_scalar
int8[2]             i8_array
int16               i16_scalar
int16[2]            i16_array
int32               i32_scalar
int32[2]            i32_array
int64               i64_scalar
int64[2]            i64_array
float32             flt_scalar
float32[2]          flt_array
float64             dbl_scalar
float64[2]          dbl_array
float64[]           variable_length_array
int32               num_channels
simple_channel[]    channels

================================================================================
MSG: lcm_to_ros/simple_channel
#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          jue 07 mar 2019 13:27:48 CET
#
#######################################################################
string              name
float64             value
"""
  __slots__ = ['str','flag','gnash','i8_scalar','i8_array','i16_scalar','i16_array','i32_scalar','i32_array','i64_scalar','i64_array','flt_scalar','flt_array','dbl_scalar','dbl_array','variable_length_array','num_channels','channels']
  _slot_types = ['string','bool','byte','int8','int8[2]','int16','int16[2]','int32','int32[2]','int64','int64[2]','float32','float32[2]','float64','float64[2]','float64[]','int32','lcm_to_ros/simple_channel[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       str,flag,gnash,i8_scalar,i8_array,i16_scalar,i16_array,i32_scalar,i32_array,i64_scalar,i64_array,flt_scalar,flt_array,dbl_scalar,dbl_array,variable_length_array,num_channels,channels

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(example_type, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.str is None:
        self.str = ''
      if self.flag is None:
        self.flag = False
      if self.gnash is None:
        self.gnash = 0
      if self.i8_scalar is None:
        self.i8_scalar = 0
      if self.i8_array is None:
        self.i8_array = [0] * 2
      if self.i16_scalar is None:
        self.i16_scalar = 0
      if self.i16_array is None:
        self.i16_array = [0] * 2
      if self.i32_scalar is None:
        self.i32_scalar = 0
      if self.i32_array is None:
        self.i32_array = [0] * 2
      if self.i64_scalar is None:
        self.i64_scalar = 0
      if self.i64_array is None:
        self.i64_array = [0] * 2
      if self.flt_scalar is None:
        self.flt_scalar = 0.
      if self.flt_array is None:
        self.flt_array = [0.] * 2
      if self.dbl_scalar is None:
        self.dbl_scalar = 0.
      if self.dbl_array is None:
        self.dbl_array = [0.] * 2
      if self.variable_length_array is None:
        self.variable_length_array = []
      if self.num_channels is None:
        self.num_channels = 0
      if self.channels is None:
        self.channels = []
    else:
      self.str = ''
      self.flag = False
      self.gnash = 0
      self.i8_scalar = 0
      self.i8_array = [0] * 2
      self.i16_scalar = 0
      self.i16_array = [0] * 2
      self.i32_scalar = 0
      self.i32_array = [0] * 2
      self.i64_scalar = 0
      self.i64_array = [0] * 2
      self.flt_scalar = 0.
      self.flt_array = [0.] * 2
      self.dbl_scalar = 0.
      self.dbl_array = [0.] * 2
      self.variable_length_array = []
      self.num_channels = 0
      self.channels = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.str
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B2b().pack(_x.flag, _x.gnash, _x.i8_scalar))
      buff.write(_get_struct_2b().pack(*self.i8_array))
      buff.write(_get_struct_h().pack(self.i16_scalar))
      buff.write(_get_struct_2h().pack(*self.i16_array))
      buff.write(_get_struct_i().pack(self.i32_scalar))
      buff.write(_get_struct_2i().pack(*self.i32_array))
      buff.write(_get_struct_q().pack(self.i64_scalar))
      buff.write(_get_struct_2q().pack(*self.i64_array))
      buff.write(_get_struct_f().pack(self.flt_scalar))
      buff.write(_get_struct_2f().pack(*self.flt_array))
      buff.write(_get_struct_d().pack(self.dbl_scalar))
      buff.write(_get_struct_2d().pack(*self.dbl_array))
      length = len(self.variable_length_array)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.variable_length_array))
      buff.write(_get_struct_i().pack(self.num_channels))
      length = len(self.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.channels is None:
        self.channels = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.str = str[start:end].decode('utf-8')
      else:
        self.str = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.flag, _x.gnash, _x.i8_scalar,) = _get_struct_B2b().unpack(str[start:end])
      self.flag = bool(self.flag)
      start = end
      end += 2
      self.i8_array = _get_struct_2b().unpack(str[start:end])
      start = end
      end += 2
      (self.i16_scalar,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      self.i16_array = _get_struct_2h().unpack(str[start:end])
      start = end
      end += 4
      (self.i32_scalar,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 8
      self.i32_array = _get_struct_2i().unpack(str[start:end])
      start = end
      end += 8
      (self.i64_scalar,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 16
      self.i64_array = _get_struct_2q().unpack(str[start:end])
      start = end
      end += 4
      (self.flt_scalar,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 8
      self.flt_array = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 8
      (self.dbl_scalar,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 16
      self.dbl_array = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.variable_length_array = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.num_channels,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.channels = []
      for i in range(0, length):
        val1 = lcm_to_ros.msg.simple_channel()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 8
        (val1.value,) = _get_struct_d().unpack(str[start:end])
        self.channels.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.str
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_B2b().pack(_x.flag, _x.gnash, _x.i8_scalar))
      buff.write(self.i8_array.tostring())
      buff.write(_get_struct_h().pack(self.i16_scalar))
      buff.write(self.i16_array.tostring())
      buff.write(_get_struct_i().pack(self.i32_scalar))
      buff.write(self.i32_array.tostring())
      buff.write(_get_struct_q().pack(self.i64_scalar))
      buff.write(self.i64_array.tostring())
      buff.write(_get_struct_f().pack(self.flt_scalar))
      buff.write(self.flt_array.tostring())
      buff.write(_get_struct_d().pack(self.dbl_scalar))
      buff.write(self.dbl_array.tostring())
      length = len(self.variable_length_array)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.variable_length_array.tostring())
      buff.write(_get_struct_i().pack(self.num_channels))
      length = len(self.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.channels is None:
        self.channels = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.str = str[start:end].decode('utf-8')
      else:
        self.str = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.flag, _x.gnash, _x.i8_scalar,) = _get_struct_B2b().unpack(str[start:end])
      self.flag = bool(self.flag)
      start = end
      end += 2
      self.i8_array = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=2)
      start = end
      end += 2
      (self.i16_scalar,) = _get_struct_h().unpack(str[start:end])
      start = end
      end += 4
      self.i16_array = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=2)
      start = end
      end += 4
      (self.i32_scalar,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 8
      self.i32_array = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      start = end
      end += 8
      (self.i64_scalar,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 16
      self.i64_array = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=2)
      start = end
      end += 4
      (self.flt_scalar,) = _get_struct_f().unpack(str[start:end])
      start = end
      end += 8
      self.flt_array = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 8
      (self.dbl_scalar,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 16
      self.dbl_array = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=2)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.variable_length_array = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (self.num_channels,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.channels = []
      for i in range(0, length):
        val1 = lcm_to_ros.msg.simple_channel()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        start = end
        end += 8
        (val1.value,) = _get_struct_d().unpack(str[start:end])
        self.channels.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_2q = None
def _get_struct_2q():
    global _struct_2q
    if _struct_2q is None:
        _struct_2q = struct.Struct("<2q")
    return _struct_2q
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_h = None
def _get_struct_h():
    global _struct_h
    if _struct_h is None:
        _struct_h = struct.Struct("<h")
    return _struct_h
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2b = None
def _get_struct_2b():
    global _struct_2b
    if _struct_2b is None:
        _struct_2b = struct.Struct("<2b")
    return _struct_2b
_struct_2h = None
def _get_struct_2h():
    global _struct_2h
    if _struct_2h is None:
        _struct_2h = struct.Struct("<2h")
    return _struct_2h
_struct_B2b = None
def _get_struct_B2b():
    global _struct_B2b
    if _struct_B2b is None:
        _struct_B2b = struct.Struct("<B2b")
    return _struct_B2b
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
