# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcm_to_ros/can_modulo_estado.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class can_modulo_estado(genpy.Message):
  _md5sum = "e6f65a6fba4df534967c07b0198c1dba"
  _type = "lcm_to_ros/can_modulo_estado"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          lun 18 feb 2019 17:14:16 CET
#
#######################################################################
int32               Timestamp_sec
int32               Timestamp_nsec
byte                IdModulo
float64             InputVolA
float64             InputVolB
float64             InputCorrA
float64             InputCorrB
float64             OutputAnlg1
float64             OutputAnlg2
bool                InputDig1
bool                InputDig2
bool                InputDig3
bool                InputDig4
bool                OutputDig1
bool                OutputDig2
bool                OutputDig3
bool                OutputDig4
bool                OutputDig5
bool                OutputDig6
bool                OutputDig7
bool                OutputDig8
"""
  __slots__ = ['Timestamp_sec','Timestamp_nsec','IdModulo','InputVolA','InputVolB','InputCorrA','InputCorrB','OutputAnlg1','OutputAnlg2','InputDig1','InputDig2','InputDig3','InputDig4','OutputDig1','OutputDig2','OutputDig3','OutputDig4','OutputDig5','OutputDig6','OutputDig7','OutputDig8']
  _slot_types = ['int32','int32','byte','float64','float64','float64','float64','float64','float64','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Timestamp_sec,Timestamp_nsec,IdModulo,InputVolA,InputVolB,InputCorrA,InputCorrB,OutputAnlg1,OutputAnlg2,InputDig1,InputDig2,InputDig3,InputDig4,OutputDig1,OutputDig2,OutputDig3,OutputDig4,OutputDig5,OutputDig6,OutputDig7,OutputDig8

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(can_modulo_estado, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Timestamp_sec is None:
        self.Timestamp_sec = 0
      if self.Timestamp_nsec is None:
        self.Timestamp_nsec = 0
      if self.IdModulo is None:
        self.IdModulo = 0
      if self.InputVolA is None:
        self.InputVolA = 0.
      if self.InputVolB is None:
        self.InputVolB = 0.
      if self.InputCorrA is None:
        self.InputCorrA = 0.
      if self.InputCorrB is None:
        self.InputCorrB = 0.
      if self.OutputAnlg1 is None:
        self.OutputAnlg1 = 0.
      if self.OutputAnlg2 is None:
        self.OutputAnlg2 = 0.
      if self.InputDig1 is None:
        self.InputDig1 = False
      if self.InputDig2 is None:
        self.InputDig2 = False
      if self.InputDig3 is None:
        self.InputDig3 = False
      if self.InputDig4 is None:
        self.InputDig4 = False
      if self.OutputDig1 is None:
        self.OutputDig1 = False
      if self.OutputDig2 is None:
        self.OutputDig2 = False
      if self.OutputDig3 is None:
        self.OutputDig3 = False
      if self.OutputDig4 is None:
        self.OutputDig4 = False
      if self.OutputDig5 is None:
        self.OutputDig5 = False
      if self.OutputDig6 is None:
        self.OutputDig6 = False
      if self.OutputDig7 is None:
        self.OutputDig7 = False
      if self.OutputDig8 is None:
        self.OutputDig8 = False
    else:
      self.Timestamp_sec = 0
      self.Timestamp_nsec = 0
      self.IdModulo = 0
      self.InputVolA = 0.
      self.InputVolB = 0.
      self.InputCorrA = 0.
      self.InputCorrB = 0.
      self.OutputAnlg1 = 0.
      self.OutputAnlg2 = 0.
      self.InputDig1 = False
      self.InputDig2 = False
      self.InputDig3 = False
      self.InputDig4 = False
      self.OutputDig1 = False
      self.OutputDig2 = False
      self.OutputDig3 = False
      self.OutputDig4 = False
      self.OutputDig5 = False
      self.OutputDig6 = False
      self.OutputDig7 = False
      self.OutputDig8 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2ib6d12B().pack(_x.Timestamp_sec, _x.Timestamp_nsec, _x.IdModulo, _x.InputVolA, _x.InputVolB, _x.InputCorrA, _x.InputCorrB, _x.OutputAnlg1, _x.OutputAnlg2, _x.InputDig1, _x.InputDig2, _x.InputDig3, _x.InputDig4, _x.OutputDig1, _x.OutputDig2, _x.OutputDig3, _x.OutputDig4, _x.OutputDig5, _x.OutputDig6, _x.OutputDig7, _x.OutputDig8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 69
      (_x.Timestamp_sec, _x.Timestamp_nsec, _x.IdModulo, _x.InputVolA, _x.InputVolB, _x.InputCorrA, _x.InputCorrB, _x.OutputAnlg1, _x.OutputAnlg2, _x.InputDig1, _x.InputDig2, _x.InputDig3, _x.InputDig4, _x.OutputDig1, _x.OutputDig2, _x.OutputDig3, _x.OutputDig4, _x.OutputDig5, _x.OutputDig6, _x.OutputDig7, _x.OutputDig8,) = _get_struct_2ib6d12B().unpack(str[start:end])
      self.InputDig1 = bool(self.InputDig1)
      self.InputDig2 = bool(self.InputDig2)
      self.InputDig3 = bool(self.InputDig3)
      self.InputDig4 = bool(self.InputDig4)
      self.OutputDig1 = bool(self.OutputDig1)
      self.OutputDig2 = bool(self.OutputDig2)
      self.OutputDig3 = bool(self.OutputDig3)
      self.OutputDig4 = bool(self.OutputDig4)
      self.OutputDig5 = bool(self.OutputDig5)
      self.OutputDig6 = bool(self.OutputDig6)
      self.OutputDig7 = bool(self.OutputDig7)
      self.OutputDig8 = bool(self.OutputDig8)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2ib6d12B().pack(_x.Timestamp_sec, _x.Timestamp_nsec, _x.IdModulo, _x.InputVolA, _x.InputVolB, _x.InputCorrA, _x.InputCorrB, _x.OutputAnlg1, _x.OutputAnlg2, _x.InputDig1, _x.InputDig2, _x.InputDig3, _x.InputDig4, _x.OutputDig1, _x.OutputDig2, _x.OutputDig3, _x.OutputDig4, _x.OutputDig5, _x.OutputDig6, _x.OutputDig7, _x.OutputDig8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 69
      (_x.Timestamp_sec, _x.Timestamp_nsec, _x.IdModulo, _x.InputVolA, _x.InputVolB, _x.InputCorrA, _x.InputCorrB, _x.OutputAnlg1, _x.OutputAnlg2, _x.InputDig1, _x.InputDig2, _x.InputDig3, _x.InputDig4, _x.OutputDig1, _x.OutputDig2, _x.OutputDig3, _x.OutputDig4, _x.OutputDig5, _x.OutputDig6, _x.OutputDig7, _x.OutputDig8,) = _get_struct_2ib6d12B().unpack(str[start:end])
      self.InputDig1 = bool(self.InputDig1)
      self.InputDig2 = bool(self.InputDig2)
      self.InputDig3 = bool(self.InputDig3)
      self.InputDig4 = bool(self.InputDig4)
      self.OutputDig1 = bool(self.OutputDig1)
      self.OutputDig2 = bool(self.OutputDig2)
      self.OutputDig3 = bool(self.OutputDig3)
      self.OutputDig4 = bool(self.OutputDig4)
      self.OutputDig5 = bool(self.OutputDig5)
      self.OutputDig6 = bool(self.OutputDig6)
      self.OutputDig7 = bool(self.OutputDig7)
      self.OutputDig8 = bool(self.OutputDig8)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2ib6d12B = None
def _get_struct_2ib6d12B():
    global _struct_2ib6d12B
    if _struct_2ib6d12B is None:
        _struct_2ib6d12B = struct.Struct("<2ib6d12B")
    return _struct_2ib6d12B
