# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcm_to_ros/gps_data.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class gps_data(genpy.Message):
  _md5sum = "e21f09763c07512fc7b4f32331812cbc"
  _type = "lcm_to_ros/gps_data"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          lun 18 feb 2019 17:14:16 CET
#
#######################################################################
int32               timestamp_sec
int32               timestamp_nsec
float64             hora
float64             utm_este
float64             utm_norte
float64             longitud
float64             latitud
float64             altura
float64             hdop
float64             velocidad
float64             heading_vel
float64             semi_major_desv
float64             semi_minor_desv
float64             semi_major_orien
int8                calidad
int8                nro_satelites
"""
  __slots__ = ['timestamp_sec','timestamp_nsec','hora','utm_este','utm_norte','longitud','latitud','altura','hdop','velocidad','heading_vel','semi_major_desv','semi_minor_desv','semi_major_orien','calidad','nro_satelites']
  _slot_types = ['int32','int32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp_sec,timestamp_nsec,hora,utm_este,utm_norte,longitud,latitud,altura,hdop,velocidad,heading_vel,semi_major_desv,semi_minor_desv,semi_major_orien,calidad,nro_satelites

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(gps_data, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp_sec is None:
        self.timestamp_sec = 0
      if self.timestamp_nsec is None:
        self.timestamp_nsec = 0
      if self.hora is None:
        self.hora = 0.
      if self.utm_este is None:
        self.utm_este = 0.
      if self.utm_norte is None:
        self.utm_norte = 0.
      if self.longitud is None:
        self.longitud = 0.
      if self.latitud is None:
        self.latitud = 0.
      if self.altura is None:
        self.altura = 0.
      if self.hdop is None:
        self.hdop = 0.
      if self.velocidad is None:
        self.velocidad = 0.
      if self.heading_vel is None:
        self.heading_vel = 0.
      if self.semi_major_desv is None:
        self.semi_major_desv = 0.
      if self.semi_minor_desv is None:
        self.semi_minor_desv = 0.
      if self.semi_major_orien is None:
        self.semi_major_orien = 0.
      if self.calidad is None:
        self.calidad = 0
      if self.nro_satelites is None:
        self.nro_satelites = 0
    else:
      self.timestamp_sec = 0
      self.timestamp_nsec = 0
      self.hora = 0.
      self.utm_este = 0.
      self.utm_norte = 0.
      self.longitud = 0.
      self.latitud = 0.
      self.altura = 0.
      self.hdop = 0.
      self.velocidad = 0.
      self.heading_vel = 0.
      self.semi_major_desv = 0.
      self.semi_minor_desv = 0.
      self.semi_major_orien = 0.
      self.calidad = 0
      self.nro_satelites = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i12d2b().pack(_x.timestamp_sec, _x.timestamp_nsec, _x.hora, _x.utm_este, _x.utm_norte, _x.longitud, _x.latitud, _x.altura, _x.hdop, _x.velocidad, _x.heading_vel, _x.semi_major_desv, _x.semi_minor_desv, _x.semi_major_orien, _x.calidad, _x.nro_satelites))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 106
      (_x.timestamp_sec, _x.timestamp_nsec, _x.hora, _x.utm_este, _x.utm_norte, _x.longitud, _x.latitud, _x.altura, _x.hdop, _x.velocidad, _x.heading_vel, _x.semi_major_desv, _x.semi_minor_desv, _x.semi_major_orien, _x.calidad, _x.nro_satelites,) = _get_struct_2i12d2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i12d2b().pack(_x.timestamp_sec, _x.timestamp_nsec, _x.hora, _x.utm_este, _x.utm_norte, _x.longitud, _x.latitud, _x.altura, _x.hdop, _x.velocidad, _x.heading_vel, _x.semi_major_desv, _x.semi_minor_desv, _x.semi_major_orien, _x.calidad, _x.nro_satelites))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 106
      (_x.timestamp_sec, _x.timestamp_nsec, _x.hora, _x.utm_este, _x.utm_norte, _x.longitud, _x.latitud, _x.altura, _x.hdop, _x.velocidad, _x.heading_vel, _x.semi_major_desv, _x.semi_minor_desv, _x.semi_major_orien, _x.calidad, _x.nro_satelites,) = _get_struct_2i12d2b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i12d2b = None
def _get_struct_2i12d2b():
    global _struct_2i12d2b
    if _struct_2i12d2b is None:
        _struct_2i12d2b = struct.Struct("<2i12d2b")
    return _struct_2i12d2b
