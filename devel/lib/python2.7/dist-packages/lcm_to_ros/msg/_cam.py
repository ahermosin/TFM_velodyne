# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcm_to_ros/cam.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class cam(genpy.Message):
  _md5sum = "ec97bde2f7c4b2bc5a04fa46a294e654"
  _type = "lcm_to_ros/cam"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          lun 18 feb 2019 17:14:15 CET
#
#######################################################################
float64             tiempo
float64             posicion_x
float64             posicion_y
float64             velocidad
float64             orientacion
"""
  __slots__ = ['tiempo','posicion_x','posicion_y','velocidad','orientacion']
  _slot_types = ['float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tiempo,posicion_x,posicion_y,velocidad,orientacion

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cam, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.tiempo is None:
        self.tiempo = 0.
      if self.posicion_x is None:
        self.posicion_x = 0.
      if self.posicion_y is None:
        self.posicion_y = 0.
      if self.velocidad is None:
        self.velocidad = 0.
      if self.orientacion is None:
        self.orientacion = 0.
    else:
      self.tiempo = 0.
      self.posicion_x = 0.
      self.posicion_y = 0.
      self.velocidad = 0.
      self.orientacion = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5d().pack(_x.tiempo, _x.posicion_x, _x.posicion_y, _x.velocidad, _x.orientacion))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.tiempo, _x.posicion_x, _x.posicion_y, _x.velocidad, _x.orientacion,) = _get_struct_5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5d().pack(_x.tiempo, _x.posicion_x, _x.posicion_y, _x.velocidad, _x.orientacion))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.tiempo, _x.posicion_x, _x.posicion_y, _x.velocidad, _x.orientacion,) = _get_struct_5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
