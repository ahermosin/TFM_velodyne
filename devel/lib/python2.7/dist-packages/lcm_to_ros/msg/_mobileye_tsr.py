# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lcm_to_ros/mobileye_tsr.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class mobileye_tsr(genpy.Message):
  _md5sum = "a4f30ab3674f73695c4e58c6fc1ab2dd"
  _type = "lcm_to_ros/mobileye_tsr"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          lun 18 feb 2019 17:14:17 CET
#
#######################################################################
int32               timestamp_sec
int32               timestamp_nsec
byte                tipo
byte                valor
byte                posicionX
int8                posicionY
int8                posicionZ
"""
  __slots__ = ['timestamp_sec','timestamp_nsec','tipo','valor','posicionX','posicionY','posicionZ']
  _slot_types = ['int32','int32','byte','byte','byte','int8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp_sec,timestamp_nsec,tipo,valor,posicionX,posicionY,posicionZ

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mobileye_tsr, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp_sec is None:
        self.timestamp_sec = 0
      if self.timestamp_nsec is None:
        self.timestamp_nsec = 0
      if self.tipo is None:
        self.tipo = 0
      if self.valor is None:
        self.valor = 0
      if self.posicionX is None:
        self.posicionX = 0
      if self.posicionY is None:
        self.posicionY = 0
      if self.posicionZ is None:
        self.posicionZ = 0
    else:
      self.timestamp_sec = 0
      self.timestamp_nsec = 0
      self.tipo = 0
      self.valor = 0
      self.posicionX = 0
      self.posicionY = 0
      self.posicionZ = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i5b().pack(_x.timestamp_sec, _x.timestamp_nsec, _x.tipo, _x.valor, _x.posicionX, _x.posicionY, _x.posicionZ))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.timestamp_sec, _x.timestamp_nsec, _x.tipo, _x.valor, _x.posicionX, _x.posicionY, _x.posicionZ,) = _get_struct_2i5b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i5b().pack(_x.timestamp_sec, _x.timestamp_nsec, _x.tipo, _x.valor, _x.posicionX, _x.posicionY, _x.posicionZ))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.timestamp_sec, _x.timestamp_nsec, _x.tipo, _x.valor, _x.posicionX, _x.posicionY, _x.posicionZ,) = _get_struct_2i5b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i5b = None
def _get_struct_2i5b():
    global _struct_2i5b
    if _struct_2i5b is None:
        _struct_2i5b = struct.Struct("<2i5b")
    return _struct_2i5b
