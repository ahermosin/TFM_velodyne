# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pcl_segment/observationRPY.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pcl_segment.msg
import genpy

class observationRPY(genpy.Message):
  _md5sum = "4dd6d3d5c4e65b8b85418ed0108e97f8"
  _type = "pcl_segment/observationRPY"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """pcl_segment/positionRPY position
bool is_Known

================================================================================
MSG: pcl_segment/positionRPY
float64 x
float64 y
float64 z
float64 roll
float64 pitch
float64 yaw
time stamp
"""
  __slots__ = ['position','is_Known']
  _slot_types = ['pcl_segment/positionRPY','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position,is_Known

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(observationRPY, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.position is None:
        self.position = pcl_segment.msg.positionRPY()
      if self.is_Known is None:
        self.is_Known = False
    else:
      self.position = pcl_segment.msg.positionRPY()
      self.is_Known = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d2IB().pack(_x.position.x, _x.position.y, _x.position.z, _x.position.roll, _x.position.pitch, _x.position.yaw, _x.position.stamp.secs, _x.position.stamp.nsecs, _x.is_Known))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.position is None:
        self.position = pcl_segment.msg.positionRPY()
      end = 0
      _x = self
      start = end
      end += 57
      (_x.position.x, _x.position.y, _x.position.z, _x.position.roll, _x.position.pitch, _x.position.yaw, _x.position.stamp.secs, _x.position.stamp.nsecs, _x.is_Known,) = _get_struct_6d2IB().unpack(str[start:end])
      self.is_Known = bool(self.is_Known)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d2IB().pack(_x.position.x, _x.position.y, _x.position.z, _x.position.roll, _x.position.pitch, _x.position.yaw, _x.position.stamp.secs, _x.position.stamp.nsecs, _x.is_Known))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.position is None:
        self.position = pcl_segment.msg.positionRPY()
      end = 0
      _x = self
      start = end
      end += 57
      (_x.position.x, _x.position.y, _x.position.z, _x.position.roll, _x.position.pitch, _x.position.yaw, _x.position.stamp.secs, _x.position.stamp.nsecs, _x.is_Known,) = _get_struct_6d2IB().unpack(str[start:end])
      self.is_Known = bool(self.is_Known)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d2IB = None
def _get_struct_6d2IB():
    global _struct_6d2IB
    if _struct_6d2IB is None:
        _struct_6d2IB = struct.Struct("<6d2IB")
    return _struct_6d2IB
