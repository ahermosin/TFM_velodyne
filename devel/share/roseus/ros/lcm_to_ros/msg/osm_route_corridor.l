;; Auto-generated. Do not edit!


(when (boundp 'lcm_to_ros::osm_route_corridor)
  (if (not (find-package "LCM_TO_ROS"))
    (make-package "LCM_TO_ROS"))
  (shadow 'osm_route_corridor (find-package "LCM_TO_ROS")))
(unless (find-package "LCM_TO_ROS::OSM_ROUTE_CORRIDOR")
  (make-package "LCM_TO_ROS::OSM_ROUTE_CORRIDOR"))

(in-package "ROS")
;;//! \htmlinclude osm_route_corridor.msg.html


(defclass lcm_to_ros::osm_route_corridor
  :super ros::object
  :slots (_id _n_puntos _punto_final _izquierda _centro _derecha ))

(defmethod lcm_to_ros::osm_route_corridor
  (:init
   (&key
    ((:id __id) 0)
    ((:n_puntos __n_puntos) 0)
    ((:punto_final __punto_final) (make-array 2 :initial-element 0.0 :element-type :float))
    ((:izquierda __izquierda) (make-array 0 :initial-element 0.0 :element-type :float))
    ((:centro __centro) (make-array 0 :initial-element 0.0 :element-type :float))
    ((:derecha __derecha) (make-array 0 :initial-element 0.0 :element-type :float))
    )
   (send-super :init)
   (setq _id (round __id))
   (setq _n_puntos (round __n_puntos))
   (setq _punto_final __punto_final)
   (setq _izquierda __izquierda)
   (setq _centro __centro)
   (setq _derecha __derecha)
   self)
  (:id
   (&optional __id)
   (if __id (setq _id __id)) _id)
  (:n_puntos
   (&optional __n_puntos)
   (if __n_puntos (setq _n_puntos __n_puntos)) _n_puntos)
  (:punto_final
   (&optional __punto_final)
   (if __punto_final (setq _punto_final __punto_final)) _punto_final)
  (:izquierda
   (&optional __izquierda)
   (if __izquierda (setq _izquierda __izquierda)) _izquierda)
  (:centro
   (&optional __centro)
   (if __centro (setq _centro __centro)) _centro)
  (:derecha
   (&optional __derecha)
   (if __derecha (setq _derecha __derecha)) _derecha)
  (:serialization-length
   ()
   (+
    ;; int32 _id
    4
    ;; int32 _n_puntos
    4
    ;; float64[2] _punto_final
    (* 8    2)
    ;; float64[] _izquierda
    (* 8    (length _izquierda)) 4
    ;; float64[] _centro
    (* 8    (length _centro)) 4
    ;; float64[] _derecha
    (* 8    (length _derecha)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int32 _id
       (write-long _id s)
     ;; int32 _n_puntos
       (write-long _n_puntos s)
     ;; float64[2] _punto_final
     (dotimes (i 2)
       (sys::poke (elt _punto_final i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;; float64[] _izquierda
     (write-long (length _izquierda) s)
     (dotimes (i (length _izquierda))
       (sys::poke (elt _izquierda i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;; float64[] _centro
     (write-long (length _centro) s)
     (dotimes (i (length _centro))
       (sys::poke (elt _centro i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;; float64[] _derecha
     (write-long (length _derecha) s)
     (dotimes (i (length _derecha))
       (sys::poke (elt _derecha i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int32 _id
     (setq _id (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; int32 _n_puntos
     (setq _n_puntos (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; float64[2] _punto_final
   (dotimes (i (length _punto_final))
     (setf (elt _punto_final i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     )
   ;; float64[] _izquierda
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _izquierda (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _izquierda i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     ))
   ;; float64[] _centro
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _centro (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _centro i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     ))
   ;; float64[] _derecha
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _derecha (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _derecha i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     ))
   ;;
   self)
  )

(setf (get lcm_to_ros::osm_route_corridor :md5sum-) "9209afcc07bf30ee8b230f80895f99ea")
(setf (get lcm_to_ros::osm_route_corridor :datatype-) "lcm_to_ros/osm_route_corridor")
(setf (get lcm_to_ros::osm_route_corridor :definition-)
      "#######################################################################
# This message was automatically generated by the lcm_to_ros package
# https://github.com/nrjl/lcm_to_ros, nicholas.lawrance@oregonstate.edu
#######################################################################
#
# Source message:    .msg
# Creation:          lun 18 feb 2019 17:14:17 CET
#
#######################################################################
int32               id
int32               n_puntos
float64[2]          punto_final
float64[]           izquierda
float64[]           centro
float64[]           derecha

")



(provide :lcm_to_ros/osm_route_corridor "9209afcc07bf30ee8b230f80895f99ea")


